
Fan_control_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  00002d82  00002e16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800184  00800184  00002f3a  2**0
                  ALLOC
  3 .stab         000020dc  00000000  00000000  00002f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001030  00000000  00000000  00005018  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006048  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000061e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000063da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000087e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00009b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ad44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000af04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b1fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bb68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__fixsfsi+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e2 e8       	ldi	r30, 0x82	; 130
     162:	fd e2       	ldi	r31, 0x2D	; 45
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a4 38       	cpi	r26, 0x84	; 132
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a4 e8       	ldi	r26, 0x84	; 132
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a5 38       	cpi	r26, 0x85	; 133
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 49 08 	call	0x1092	; 0x1092 <main>
     184:	0c 94 bf 16 	jmp	0x2d7e	; 0x2d7e <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 e8 13 	jmp	0x27d0	; 0x27d0 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	ac e7       	ldi	r26, 0x7C	; 124
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 f4 13 	jmp	0x27e8	; 0x27e8 <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 10 14 	jmp	0x2820	; 0x2820 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 f4 13 	jmp	0x27e8	; 0x27e8 <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 10 14 	jmp	0x2820	; 0x2820 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 e8 13 	jmp	0x27d0	; 0x27d0 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	8c e7       	ldi	r24, 0x7C	; 124
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 f0 13 	jmp	0x27e0	; 0x27e0 <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__stack+0x11>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__stack+0x17>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__stack+0x11>
     794:	6c e7       	ldi	r22, 0x7C	; 124
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__stack+0x17>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__stack+0x17>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__stack+0x9>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__stack+0x9>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 0c 14 	jmp	0x2818	; 0x2818 <__epilogue_restores__+0x10>

00000884 <__gtsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 f4 13 	jmp	0x27e8	; 0x27e8 <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__gtsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__gtsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__gtsf2+0x58>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 10 14 	jmp	0x2820	; 0x2820 <__epilogue_restores__+0x18>

000008e4 <__gesf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 f4 13 	jmp	0x27e8	; 0x27e8 <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gesf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gesf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gesf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 10 14 	jmp	0x2820	; 0x2820 <__epilogue_restores__+0x18>

00000944 <__ltsf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 f4 13 	jmp	0x27e8	; 0x27e8 <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__ltsf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__ltsf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__ltsf2+0x58>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 10 14 	jmp	0x2820	; 0x2820 <__epilogue_restores__+0x18>

000009a4 <__fixsfsi>:
     9a4:	ac e0       	ldi	r26, 0x0C	; 12
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__prologue_saves__+0x20>
     9b0:	69 83       	std	Y+1, r22	; 0x01
     9b2:	7a 83       	std	Y+2, r23	; 0x02
     9b4:	8b 83       	std	Y+3, r24	; 0x03
     9b6:	9c 83       	std	Y+4, r25	; 0x04
     9b8:	ce 01       	movw	r24, r28
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	be 01       	movw	r22, r28
     9be:	6b 5f       	subi	r22, 0xFB	; 251
     9c0:	7f 4f       	sbci	r23, 0xFF	; 255
     9c2:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     9c6:	8d 81       	ldd	r24, Y+5	; 0x05
     9c8:	82 30       	cpi	r24, 0x02	; 2
     9ca:	61 f1       	breq	.+88     	; 0xa24 <__fixsfsi+0x80>
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	50 f1       	brcs	.+84     	; 0xa24 <__fixsfsi+0x80>
     9d0:	84 30       	cpi	r24, 0x04	; 4
     9d2:	21 f4       	brne	.+8      	; 0x9dc <__fixsfsi+0x38>
     9d4:	8e 81       	ldd	r24, Y+6	; 0x06
     9d6:	88 23       	and	r24, r24
     9d8:	51 f1       	breq	.+84     	; 0xa2e <__fixsfsi+0x8a>
     9da:	2e c0       	rjmp	.+92     	; 0xa38 <__fixsfsi+0x94>
     9dc:	2f 81       	ldd	r18, Y+7	; 0x07
     9de:	38 85       	ldd	r19, Y+8	; 0x08
     9e0:	37 fd       	sbrc	r19, 7
     9e2:	20 c0       	rjmp	.+64     	; 0xa24 <__fixsfsi+0x80>
     9e4:	6e 81       	ldd	r22, Y+6	; 0x06
     9e6:	2f 31       	cpi	r18, 0x1F	; 31
     9e8:	31 05       	cpc	r19, r1
     9ea:	1c f0       	brlt	.+6      	; 0x9f2 <__fixsfsi+0x4e>
     9ec:	66 23       	and	r22, r22
     9ee:	f9 f0       	breq	.+62     	; 0xa2e <__fixsfsi+0x8a>
     9f0:	23 c0       	rjmp	.+70     	; 0xa38 <__fixsfsi+0x94>
     9f2:	8e e1       	ldi	r24, 0x1E	; 30
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	82 1b       	sub	r24, r18
     9f8:	93 0b       	sbc	r25, r19
     9fa:	29 85       	ldd	r18, Y+9	; 0x09
     9fc:	3a 85       	ldd	r19, Y+10	; 0x0a
     9fe:	4b 85       	ldd	r20, Y+11	; 0x0b
     a00:	5c 85       	ldd	r21, Y+12	; 0x0c
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__fixsfsi+0x68>
     a04:	56 95       	lsr	r21
     a06:	47 95       	ror	r20
     a08:	37 95       	ror	r19
     a0a:	27 95       	ror	r18
     a0c:	8a 95       	dec	r24
     a0e:	d2 f7       	brpl	.-12     	; 0xa04 <__fixsfsi+0x60>
     a10:	66 23       	and	r22, r22
     a12:	b1 f0       	breq	.+44     	; 0xa40 <__fixsfsi+0x9c>
     a14:	50 95       	com	r21
     a16:	40 95       	com	r20
     a18:	30 95       	com	r19
     a1a:	21 95       	neg	r18
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	4f 4f       	sbci	r20, 0xFF	; 255
     a20:	5f 4f       	sbci	r21, 0xFF	; 255
     a22:	0e c0       	rjmp	.+28     	; 0xa40 <__fixsfsi+0x9c>
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	09 c0       	rjmp	.+18     	; 0xa40 <__fixsfsi+0x9c>
     a2e:	2f ef       	ldi	r18, 0xFF	; 255
     a30:	3f ef       	ldi	r19, 0xFF	; 255
     a32:	4f ef       	ldi	r20, 0xFF	; 255
     a34:	5f e7       	ldi	r21, 0x7F	; 127
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <__fixsfsi+0x9c>
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	50 e8       	ldi	r21, 0x80	; 128
     a40:	b9 01       	movw	r22, r18
     a42:	ca 01       	movw	r24, r20
     a44:	2c 96       	adiw	r28, 0x0c	; 12
     a46:	e2 e0       	ldi	r30, 0x02	; 2
     a48:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__epilogue_restores__+0x20>

00000a4c <__floatunsisf>:
     a4c:	a8 e0       	ldi	r26, 0x08	; 8
     a4e:	b0 e0       	ldi	r27, 0x00	; 0
     a50:	ec e2       	ldi	r30, 0x2C	; 44
     a52:	f5 e0       	ldi	r31, 0x05	; 5
     a54:	0c 94 f0 13 	jmp	0x27e0	; 0x27e0 <__prologue_saves__+0x10>
     a58:	7b 01       	movw	r14, r22
     a5a:	8c 01       	movw	r16, r24
     a5c:	61 15       	cp	r22, r1
     a5e:	71 05       	cpc	r23, r1
     a60:	81 05       	cpc	r24, r1
     a62:	91 05       	cpc	r25, r1
     a64:	19 f4       	brne	.+6      	; 0xa6c <__floatunsisf+0x20>
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	89 83       	std	Y+1, r24	; 0x01
     a6a:	60 c0       	rjmp	.+192    	; 0xb2c <__floatunsisf+0xe0>
     a6c:	83 e0       	ldi	r24, 0x03	; 3
     a6e:	89 83       	std	Y+1, r24	; 0x01
     a70:	8e e1       	ldi	r24, 0x1E	; 30
     a72:	c8 2e       	mov	r12, r24
     a74:	d1 2c       	mov	r13, r1
     a76:	dc 82       	std	Y+4, r13	; 0x04
     a78:	cb 82       	std	Y+3, r12	; 0x03
     a7a:	ed 82       	std	Y+5, r14	; 0x05
     a7c:	fe 82       	std	Y+6, r15	; 0x06
     a7e:	0f 83       	std	Y+7, r16	; 0x07
     a80:	18 87       	std	Y+8, r17	; 0x08
     a82:	c8 01       	movw	r24, r16
     a84:	b7 01       	movw	r22, r14
     a86:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__clzsi2>
     a8a:	fc 01       	movw	r30, r24
     a8c:	31 97       	sbiw	r30, 0x01	; 1
     a8e:	f7 ff       	sbrs	r31, 7
     a90:	3b c0       	rjmp	.+118    	; 0xb08 <__floatunsisf+0xbc>
     a92:	22 27       	eor	r18, r18
     a94:	33 27       	eor	r19, r19
     a96:	2e 1b       	sub	r18, r30
     a98:	3f 0b       	sbc	r19, r31
     a9a:	57 01       	movw	r10, r14
     a9c:	68 01       	movw	r12, r16
     a9e:	02 2e       	mov	r0, r18
     aa0:	04 c0       	rjmp	.+8      	; 0xaaa <__floatunsisf+0x5e>
     aa2:	d6 94       	lsr	r13
     aa4:	c7 94       	ror	r12
     aa6:	b7 94       	ror	r11
     aa8:	a7 94       	ror	r10
     aaa:	0a 94       	dec	r0
     aac:	d2 f7       	brpl	.-12     	; 0xaa2 <__floatunsisf+0x56>
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	50 e0       	ldi	r21, 0x00	; 0
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	a0 e0       	ldi	r26, 0x00	; 0
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__floatunsisf+0x7c>
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	aa 1f       	adc	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	2a 95       	dec	r18
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__floatunsisf+0x74>
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	a1 09       	sbc	r26, r1
     ad0:	b1 09       	sbc	r27, r1
     ad2:	8e 21       	and	r24, r14
     ad4:	9f 21       	and	r25, r15
     ad6:	a0 23       	and	r26, r16
     ad8:	b1 23       	and	r27, r17
     ada:	00 97       	sbiw	r24, 0x00	; 0
     adc:	a1 05       	cpc	r26, r1
     ade:	b1 05       	cpc	r27, r1
     ae0:	21 f0       	breq	.+8      	; 0xaea <__floatunsisf+0x9e>
     ae2:	41 e0       	ldi	r20, 0x01	; 1
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	4a 29       	or	r20, r10
     aec:	5b 29       	or	r21, r11
     aee:	6c 29       	or	r22, r12
     af0:	7d 29       	or	r23, r13
     af2:	4d 83       	std	Y+5, r20	; 0x05
     af4:	5e 83       	std	Y+6, r21	; 0x06
     af6:	6f 83       	std	Y+7, r22	; 0x07
     af8:	78 87       	std	Y+8, r23	; 0x08
     afa:	8e e1       	ldi	r24, 0x1E	; 30
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	8e 1b       	sub	r24, r30
     b00:	9f 0b       	sbc	r25, r31
     b02:	9c 83       	std	Y+4, r25	; 0x04
     b04:	8b 83       	std	Y+3, r24	; 0x03
     b06:	12 c0       	rjmp	.+36     	; 0xb2c <__floatunsisf+0xe0>
     b08:	30 97       	sbiw	r30, 0x00	; 0
     b0a:	81 f0       	breq	.+32     	; 0xb2c <__floatunsisf+0xe0>
     b0c:	0e 2e       	mov	r0, r30
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__floatunsisf+0xcc>
     b10:	ee 0c       	add	r14, r14
     b12:	ff 1c       	adc	r15, r15
     b14:	00 1f       	adc	r16, r16
     b16:	11 1f       	adc	r17, r17
     b18:	0a 94       	dec	r0
     b1a:	d2 f7       	brpl	.-12     	; 0xb10 <__floatunsisf+0xc4>
     b1c:	ed 82       	std	Y+5, r14	; 0x05
     b1e:	fe 82       	std	Y+6, r15	; 0x06
     b20:	0f 83       	std	Y+7, r16	; 0x07
     b22:	18 87       	std	Y+8, r17	; 0x08
     b24:	ce 1a       	sub	r12, r30
     b26:	df 0a       	sbc	r13, r31
     b28:	dc 82       	std	Y+4, r13	; 0x04
     b2a:	cb 82       	std	Y+3, r12	; 0x03
     b2c:	1a 82       	std	Y+2, r1	; 0x02
     b2e:	ce 01       	movw	r24, r28
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     b36:	28 96       	adiw	r28, 0x08	; 8
     b38:	ea e0       	ldi	r30, 0x0A	; 10
     b3a:	0c 94 0c 14 	jmp	0x2818	; 0x2818 <__epilogue_restores__+0x10>

00000b3e <__clzsi2>:
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	7b 01       	movw	r14, r22
     b48:	8c 01       	movw	r16, r24
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	e8 16       	cp	r14, r24
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	f8 06       	cpc	r15, r24
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	08 07       	cpc	r16, r24
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	18 07       	cpc	r17, r24
     b5a:	88 f4       	brcc	.+34     	; 0xb7e <__clzsi2+0x40>
     b5c:	8f ef       	ldi	r24, 0xFF	; 255
     b5e:	e8 16       	cp	r14, r24
     b60:	f1 04       	cpc	r15, r1
     b62:	01 05       	cpc	r16, r1
     b64:	11 05       	cpc	r17, r1
     b66:	31 f0       	breq	.+12     	; 0xb74 <__clzsi2+0x36>
     b68:	28 f0       	brcs	.+10     	; 0xb74 <__clzsi2+0x36>
     b6a:	88 e0       	ldi	r24, 0x08	; 8
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	a0 e0       	ldi	r26, 0x00	; 0
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	17 c0       	rjmp	.+46     	; 0xba2 <__clzsi2+0x64>
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	a0 e0       	ldi	r26, 0x00	; 0
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	12 c0       	rjmp	.+36     	; 0xba2 <__clzsi2+0x64>
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	e8 16       	cp	r14, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	f8 06       	cpc	r15, r24
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	08 07       	cpc	r16, r24
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	18 07       	cpc	r17, r24
     b8e:	28 f0       	brcs	.+10     	; 0xb9a <__clzsi2+0x5c>
     b90:	88 e1       	ldi	r24, 0x18	; 24
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	a0 e0       	ldi	r26, 0x00	; 0
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__clzsi2+0x64>
     b9a:	80 e1       	ldi	r24, 0x10	; 16
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	a0 e0       	ldi	r26, 0x00	; 0
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	20 e2       	ldi	r18, 0x20	; 32
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	28 1b       	sub	r18, r24
     bac:	39 0b       	sbc	r19, r25
     bae:	4a 0b       	sbc	r20, r26
     bb0:	5b 0b       	sbc	r21, r27
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <__clzsi2+0x7e>
     bb4:	16 95       	lsr	r17
     bb6:	07 95       	ror	r16
     bb8:	f7 94       	ror	r15
     bba:	e7 94       	ror	r14
     bbc:	8a 95       	dec	r24
     bbe:	d2 f7       	brpl	.-12     	; 0xbb4 <__clzsi2+0x76>
     bc0:	f7 01       	movw	r30, r14
     bc2:	ec 57       	subi	r30, 0x7C	; 124
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	80 81       	ld	r24, Z
     bc8:	28 1b       	sub	r18, r24
     bca:	31 09       	sbc	r19, r1
     bcc:	41 09       	sbc	r20, r1
     bce:	51 09       	sbc	r21, r1
     bd0:	c9 01       	movw	r24, r18
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	ff 90       	pop	r15
     bd8:	ef 90       	pop	r14
     bda:	08 95       	ret

00000bdc <__pack_f>:
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	fc 01       	movw	r30, r24
     be8:	e4 80       	ldd	r14, Z+4	; 0x04
     bea:	f5 80       	ldd	r15, Z+5	; 0x05
     bec:	06 81       	ldd	r16, Z+6	; 0x06
     bee:	17 81       	ldd	r17, Z+7	; 0x07
     bf0:	d1 80       	ldd	r13, Z+1	; 0x01
     bf2:	80 81       	ld	r24, Z
     bf4:	82 30       	cpi	r24, 0x02	; 2
     bf6:	48 f4       	brcc	.+18     	; 0xc0a <__pack_f+0x2e>
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e1       	ldi	r26, 0x10	; 16
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e8 2a       	or	r14, r24
     c02:	f9 2a       	or	r15, r25
     c04:	0a 2b       	or	r16, r26
     c06:	1b 2b       	or	r17, r27
     c08:	a5 c0       	rjmp	.+330    	; 0xd54 <__pack_f+0x178>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	09 f4       	brne	.+2      	; 0xc10 <__pack_f+0x34>
     c0e:	9f c0       	rjmp	.+318    	; 0xd4e <__pack_f+0x172>
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	21 f4       	brne	.+8      	; 0xc1c <__pack_f+0x40>
     c14:	ee 24       	eor	r14, r14
     c16:	ff 24       	eor	r15, r15
     c18:	87 01       	movw	r16, r14
     c1a:	05 c0       	rjmp	.+10     	; 0xc26 <__pack_f+0x4a>
     c1c:	e1 14       	cp	r14, r1
     c1e:	f1 04       	cpc	r15, r1
     c20:	01 05       	cpc	r16, r1
     c22:	11 05       	cpc	r17, r1
     c24:	19 f4       	brne	.+6      	; 0xc2c <__pack_f+0x50>
     c26:	e0 e0       	ldi	r30, 0x00	; 0
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	96 c0       	rjmp	.+300    	; 0xd58 <__pack_f+0x17c>
     c2c:	62 81       	ldd	r22, Z+2	; 0x02
     c2e:	73 81       	ldd	r23, Z+3	; 0x03
     c30:	9f ef       	ldi	r25, 0xFF	; 255
     c32:	62 38       	cpi	r22, 0x82	; 130
     c34:	79 07       	cpc	r23, r25
     c36:	0c f0       	brlt	.+2      	; 0xc3a <__pack_f+0x5e>
     c38:	5b c0       	rjmp	.+182    	; 0xcf0 <__pack_f+0x114>
     c3a:	22 e8       	ldi	r18, 0x82	; 130
     c3c:	3f ef       	ldi	r19, 0xFF	; 255
     c3e:	26 1b       	sub	r18, r22
     c40:	37 0b       	sbc	r19, r23
     c42:	2a 31       	cpi	r18, 0x1A	; 26
     c44:	31 05       	cpc	r19, r1
     c46:	2c f0       	brlt	.+10     	; 0xc52 <__pack_f+0x76>
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	2a c0       	rjmp	.+84     	; 0xca6 <__pack_f+0xca>
     c52:	b8 01       	movw	r22, r16
     c54:	a7 01       	movw	r20, r14
     c56:	02 2e       	mov	r0, r18
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <__pack_f+0x86>
     c5a:	76 95       	lsr	r23
     c5c:	67 95       	ror	r22
     c5e:	57 95       	ror	r21
     c60:	47 95       	ror	r20
     c62:	0a 94       	dec	r0
     c64:	d2 f7       	brpl	.-12     	; 0xc5a <__pack_f+0x7e>
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	a0 e0       	ldi	r26, 0x00	; 0
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <__pack_f+0x9c>
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	aa 1f       	adc	r26, r26
     c76:	bb 1f       	adc	r27, r27
     c78:	2a 95       	dec	r18
     c7a:	d2 f7       	brpl	.-12     	; 0xc70 <__pack_f+0x94>
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	a1 09       	sbc	r26, r1
     c80:	b1 09       	sbc	r27, r1
     c82:	8e 21       	and	r24, r14
     c84:	9f 21       	and	r25, r15
     c86:	a0 23       	and	r26, r16
     c88:	b1 23       	and	r27, r17
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	a1 05       	cpc	r26, r1
     c8e:	b1 05       	cpc	r27, r1
     c90:	21 f0       	breq	.+8      	; 0xc9a <__pack_f+0xbe>
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	a0 e0       	ldi	r26, 0x00	; 0
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	9a 01       	movw	r18, r20
     c9c:	ab 01       	movw	r20, r22
     c9e:	28 2b       	or	r18, r24
     ca0:	39 2b       	or	r19, r25
     ca2:	4a 2b       	or	r20, r26
     ca4:	5b 2b       	or	r21, r27
     ca6:	da 01       	movw	r26, r20
     ca8:	c9 01       	movw	r24, r18
     caa:	8f 77       	andi	r24, 0x7F	; 127
     cac:	90 70       	andi	r25, 0x00	; 0
     cae:	a0 70       	andi	r26, 0x00	; 0
     cb0:	b0 70       	andi	r27, 0x00	; 0
     cb2:	80 34       	cpi	r24, 0x40	; 64
     cb4:	91 05       	cpc	r25, r1
     cb6:	a1 05       	cpc	r26, r1
     cb8:	b1 05       	cpc	r27, r1
     cba:	39 f4       	brne	.+14     	; 0xcca <__pack_f+0xee>
     cbc:	27 ff       	sbrs	r18, 7
     cbe:	09 c0       	rjmp	.+18     	; 0xcd2 <__pack_f+0xf6>
     cc0:	20 5c       	subi	r18, 0xC0	; 192
     cc2:	3f 4f       	sbci	r19, 0xFF	; 255
     cc4:	4f 4f       	sbci	r20, 0xFF	; 255
     cc6:	5f 4f       	sbci	r21, 0xFF	; 255
     cc8:	04 c0       	rjmp	.+8      	; 0xcd2 <__pack_f+0xf6>
     cca:	21 5c       	subi	r18, 0xC1	; 193
     ccc:	3f 4f       	sbci	r19, 0xFF	; 255
     cce:	4f 4f       	sbci	r20, 0xFF	; 255
     cd0:	5f 4f       	sbci	r21, 0xFF	; 255
     cd2:	e0 e0       	ldi	r30, 0x00	; 0
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	a0 e0       	ldi	r26, 0x00	; 0
     cda:	3a 07       	cpc	r19, r26
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	4a 07       	cpc	r20, r26
     ce0:	a0 e4       	ldi	r26, 0x40	; 64
     ce2:	5a 07       	cpc	r21, r26
     ce4:	10 f0       	brcs	.+4      	; 0xcea <__pack_f+0x10e>
     ce6:	e1 e0       	ldi	r30, 0x01	; 1
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	79 01       	movw	r14, r18
     cec:	8a 01       	movw	r16, r20
     cee:	27 c0       	rjmp	.+78     	; 0xd3e <__pack_f+0x162>
     cf0:	60 38       	cpi	r22, 0x80	; 128
     cf2:	71 05       	cpc	r23, r1
     cf4:	64 f5       	brge	.+88     	; 0xd4e <__pack_f+0x172>
     cf6:	fb 01       	movw	r30, r22
     cf8:	e1 58       	subi	r30, 0x81	; 129
     cfa:	ff 4f       	sbci	r31, 0xFF	; 255
     cfc:	d8 01       	movw	r26, r16
     cfe:	c7 01       	movw	r24, r14
     d00:	8f 77       	andi	r24, 0x7F	; 127
     d02:	90 70       	andi	r25, 0x00	; 0
     d04:	a0 70       	andi	r26, 0x00	; 0
     d06:	b0 70       	andi	r27, 0x00	; 0
     d08:	80 34       	cpi	r24, 0x40	; 64
     d0a:	91 05       	cpc	r25, r1
     d0c:	a1 05       	cpc	r26, r1
     d0e:	b1 05       	cpc	r27, r1
     d10:	39 f4       	brne	.+14     	; 0xd20 <__pack_f+0x144>
     d12:	e7 fe       	sbrs	r14, 7
     d14:	0d c0       	rjmp	.+26     	; 0xd30 <__pack_f+0x154>
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	a0 e0       	ldi	r26, 0x00	; 0
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	04 c0       	rjmp	.+8      	; 0xd28 <__pack_f+0x14c>
     d20:	8f e3       	ldi	r24, 0x3F	; 63
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	a0 e0       	ldi	r26, 0x00	; 0
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e8 0e       	add	r14, r24
     d2a:	f9 1e       	adc	r15, r25
     d2c:	0a 1f       	adc	r16, r26
     d2e:	1b 1f       	adc	r17, r27
     d30:	17 ff       	sbrs	r17, 7
     d32:	05 c0       	rjmp	.+10     	; 0xd3e <__pack_f+0x162>
     d34:	16 95       	lsr	r17
     d36:	07 95       	ror	r16
     d38:	f7 94       	ror	r15
     d3a:	e7 94       	ror	r14
     d3c:	31 96       	adiw	r30, 0x01	; 1
     d3e:	87 e0       	ldi	r24, 0x07	; 7
     d40:	16 95       	lsr	r17
     d42:	07 95       	ror	r16
     d44:	f7 94       	ror	r15
     d46:	e7 94       	ror	r14
     d48:	8a 95       	dec	r24
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__pack_f+0x164>
     d4c:	05 c0       	rjmp	.+10     	; 0xd58 <__pack_f+0x17c>
     d4e:	ee 24       	eor	r14, r14
     d50:	ff 24       	eor	r15, r15
     d52:	87 01       	movw	r16, r14
     d54:	ef ef       	ldi	r30, 0xFF	; 255
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	6e 2f       	mov	r22, r30
     d5a:	67 95       	ror	r22
     d5c:	66 27       	eor	r22, r22
     d5e:	67 95       	ror	r22
     d60:	90 2f       	mov	r25, r16
     d62:	9f 77       	andi	r25, 0x7F	; 127
     d64:	d7 94       	ror	r13
     d66:	dd 24       	eor	r13, r13
     d68:	d7 94       	ror	r13
     d6a:	8e 2f       	mov	r24, r30
     d6c:	86 95       	lsr	r24
     d6e:	49 2f       	mov	r20, r25
     d70:	46 2b       	or	r20, r22
     d72:	58 2f       	mov	r21, r24
     d74:	5d 29       	or	r21, r13
     d76:	b7 01       	movw	r22, r14
     d78:	ca 01       	movw	r24, r20
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
     d82:	df 90       	pop	r13
     d84:	08 95       	ret

00000d86 <__unpack_f>:
     d86:	fc 01       	movw	r30, r24
     d88:	db 01       	movw	r26, r22
     d8a:	40 81       	ld	r20, Z
     d8c:	51 81       	ldd	r21, Z+1	; 0x01
     d8e:	22 81       	ldd	r18, Z+2	; 0x02
     d90:	62 2f       	mov	r22, r18
     d92:	6f 77       	andi	r22, 0x7F	; 127
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	22 1f       	adc	r18, r18
     d98:	22 27       	eor	r18, r18
     d9a:	22 1f       	adc	r18, r18
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
     d9e:	89 2f       	mov	r24, r25
     da0:	88 0f       	add	r24, r24
     da2:	82 2b       	or	r24, r18
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	99 1f       	adc	r25, r25
     daa:	99 27       	eor	r25, r25
     dac:	99 1f       	adc	r25, r25
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	9c 93       	st	X, r25
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	21 15       	cp	r18, r1
     db6:	31 05       	cpc	r19, r1
     db8:	a9 f5       	brne	.+106    	; 0xe24 <__unpack_f+0x9e>
     dba:	41 15       	cp	r20, r1
     dbc:	51 05       	cpc	r21, r1
     dbe:	61 05       	cpc	r22, r1
     dc0:	71 05       	cpc	r23, r1
     dc2:	11 f4       	brne	.+4      	; 0xdc8 <__unpack_f+0x42>
     dc4:	82 e0       	ldi	r24, 0x02	; 2
     dc6:	37 c0       	rjmp	.+110    	; 0xe36 <__unpack_f+0xb0>
     dc8:	82 e8       	ldi	r24, 0x82	; 130
     dca:	9f ef       	ldi	r25, 0xFF	; 255
     dcc:	13 96       	adiw	r26, 0x03	; 3
     dce:	9c 93       	st	X, r25
     dd0:	8e 93       	st	-X, r24
     dd2:	12 97       	sbiw	r26, 0x02	; 2
     dd4:	9a 01       	movw	r18, r20
     dd6:	ab 01       	movw	r20, r22
     dd8:	67 e0       	ldi	r22, 0x07	; 7
     dda:	22 0f       	add	r18, r18
     ddc:	33 1f       	adc	r19, r19
     dde:	44 1f       	adc	r20, r20
     de0:	55 1f       	adc	r21, r21
     de2:	6a 95       	dec	r22
     de4:	d1 f7       	brne	.-12     	; 0xdda <__unpack_f+0x54>
     de6:	83 e0       	ldi	r24, 0x03	; 3
     de8:	8c 93       	st	X, r24
     dea:	0d c0       	rjmp	.+26     	; 0xe06 <__unpack_f+0x80>
     dec:	22 0f       	add	r18, r18
     dee:	33 1f       	adc	r19, r19
     df0:	44 1f       	adc	r20, r20
     df2:	55 1f       	adc	r21, r21
     df4:	12 96       	adiw	r26, 0x02	; 2
     df6:	8d 91       	ld	r24, X+
     df8:	9c 91       	ld	r25, X
     dfa:	13 97       	sbiw	r26, 0x03	; 3
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	13 96       	adiw	r26, 0x03	; 3
     e00:	9c 93       	st	X, r25
     e02:	8e 93       	st	-X, r24
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	20 30       	cpi	r18, 0x00	; 0
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	38 07       	cpc	r19, r24
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	48 07       	cpc	r20, r24
     e10:	80 e4       	ldi	r24, 0x40	; 64
     e12:	58 07       	cpc	r21, r24
     e14:	58 f3       	brcs	.-42     	; 0xdec <__unpack_f+0x66>
     e16:	14 96       	adiw	r26, 0x04	; 4
     e18:	2d 93       	st	X+, r18
     e1a:	3d 93       	st	X+, r19
     e1c:	4d 93       	st	X+, r20
     e1e:	5c 93       	st	X, r21
     e20:	17 97       	sbiw	r26, 0x07	; 7
     e22:	08 95       	ret
     e24:	2f 3f       	cpi	r18, 0xFF	; 255
     e26:	31 05       	cpc	r19, r1
     e28:	79 f4       	brne	.+30     	; 0xe48 <__unpack_f+0xc2>
     e2a:	41 15       	cp	r20, r1
     e2c:	51 05       	cpc	r21, r1
     e2e:	61 05       	cpc	r22, r1
     e30:	71 05       	cpc	r23, r1
     e32:	19 f4       	brne	.+6      	; 0xe3a <__unpack_f+0xb4>
     e34:	84 e0       	ldi	r24, 0x04	; 4
     e36:	8c 93       	st	X, r24
     e38:	08 95       	ret
     e3a:	64 ff       	sbrs	r22, 4
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <__unpack_f+0xbe>
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	8c 93       	st	X, r24
     e42:	12 c0       	rjmp	.+36     	; 0xe68 <__unpack_f+0xe2>
     e44:	1c 92       	st	X, r1
     e46:	10 c0       	rjmp	.+32     	; 0xe68 <__unpack_f+0xe2>
     e48:	2f 57       	subi	r18, 0x7F	; 127
     e4a:	30 40       	sbci	r19, 0x00	; 0
     e4c:	13 96       	adiw	r26, 0x03	; 3
     e4e:	3c 93       	st	X, r19
     e50:	2e 93       	st	-X, r18
     e52:	12 97       	sbiw	r26, 0x02	; 2
     e54:	83 e0       	ldi	r24, 0x03	; 3
     e56:	8c 93       	st	X, r24
     e58:	87 e0       	ldi	r24, 0x07	; 7
     e5a:	44 0f       	add	r20, r20
     e5c:	55 1f       	adc	r21, r21
     e5e:	66 1f       	adc	r22, r22
     e60:	77 1f       	adc	r23, r23
     e62:	8a 95       	dec	r24
     e64:	d1 f7       	brne	.-12     	; 0xe5a <__unpack_f+0xd4>
     e66:	70 64       	ori	r23, 0x40	; 64
     e68:	14 96       	adiw	r26, 0x04	; 4
     e6a:	4d 93       	st	X+, r20
     e6c:	5d 93       	st	X+, r21
     e6e:	6d 93       	st	X+, r22
     e70:	7c 93       	st	X, r23
     e72:	17 97       	sbiw	r26, 0x07	; 7
     e74:	08 95       	ret

00000e76 <__fpcmp_parts_f>:
     e76:	1f 93       	push	r17
     e78:	dc 01       	movw	r26, r24
     e7a:	fb 01       	movw	r30, r22
     e7c:	9c 91       	ld	r25, X
     e7e:	92 30       	cpi	r25, 0x02	; 2
     e80:	08 f4       	brcc	.+2      	; 0xe84 <__fpcmp_parts_f+0xe>
     e82:	47 c0       	rjmp	.+142    	; 0xf12 <__fpcmp_parts_f+0x9c>
     e84:	80 81       	ld	r24, Z
     e86:	82 30       	cpi	r24, 0x02	; 2
     e88:	08 f4       	brcc	.+2      	; 0xe8c <__fpcmp_parts_f+0x16>
     e8a:	43 c0       	rjmp	.+134    	; 0xf12 <__fpcmp_parts_f+0x9c>
     e8c:	94 30       	cpi	r25, 0x04	; 4
     e8e:	51 f4       	brne	.+20     	; 0xea4 <__fpcmp_parts_f+0x2e>
     e90:	11 96       	adiw	r26, 0x01	; 1
     e92:	1c 91       	ld	r17, X
     e94:	84 30       	cpi	r24, 0x04	; 4
     e96:	99 f5       	brne	.+102    	; 0xefe <__fpcmp_parts_f+0x88>
     e98:	81 81       	ldd	r24, Z+1	; 0x01
     e9a:	68 2f       	mov	r22, r24
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	61 1b       	sub	r22, r17
     ea0:	71 09       	sbc	r23, r1
     ea2:	3f c0       	rjmp	.+126    	; 0xf22 <__fpcmp_parts_f+0xac>
     ea4:	84 30       	cpi	r24, 0x04	; 4
     ea6:	21 f0       	breq	.+8      	; 0xeb0 <__fpcmp_parts_f+0x3a>
     ea8:	92 30       	cpi	r25, 0x02	; 2
     eaa:	31 f4       	brne	.+12     	; 0xeb8 <__fpcmp_parts_f+0x42>
     eac:	82 30       	cpi	r24, 0x02	; 2
     eae:	b9 f1       	breq	.+110    	; 0xf1e <__fpcmp_parts_f+0xa8>
     eb0:	81 81       	ldd	r24, Z+1	; 0x01
     eb2:	88 23       	and	r24, r24
     eb4:	89 f1       	breq	.+98     	; 0xf18 <__fpcmp_parts_f+0xa2>
     eb6:	2d c0       	rjmp	.+90     	; 0xf12 <__fpcmp_parts_f+0x9c>
     eb8:	11 96       	adiw	r26, 0x01	; 1
     eba:	1c 91       	ld	r17, X
     ebc:	11 97       	sbiw	r26, 0x01	; 1
     ebe:	82 30       	cpi	r24, 0x02	; 2
     ec0:	f1 f0       	breq	.+60     	; 0xefe <__fpcmp_parts_f+0x88>
     ec2:	81 81       	ldd	r24, Z+1	; 0x01
     ec4:	18 17       	cp	r17, r24
     ec6:	d9 f4       	brne	.+54     	; 0xefe <__fpcmp_parts_f+0x88>
     ec8:	12 96       	adiw	r26, 0x02	; 2
     eca:	2d 91       	ld	r18, X+
     ecc:	3c 91       	ld	r19, X
     ece:	13 97       	sbiw	r26, 0x03	; 3
     ed0:	82 81       	ldd	r24, Z+2	; 0x02
     ed2:	93 81       	ldd	r25, Z+3	; 0x03
     ed4:	82 17       	cp	r24, r18
     ed6:	93 07       	cpc	r25, r19
     ed8:	94 f0       	brlt	.+36     	; 0xefe <__fpcmp_parts_f+0x88>
     eda:	28 17       	cp	r18, r24
     edc:	39 07       	cpc	r19, r25
     ede:	bc f0       	brlt	.+46     	; 0xf0e <__fpcmp_parts_f+0x98>
     ee0:	14 96       	adiw	r26, 0x04	; 4
     ee2:	8d 91       	ld	r24, X+
     ee4:	9d 91       	ld	r25, X+
     ee6:	0d 90       	ld	r0, X+
     ee8:	bc 91       	ld	r27, X
     eea:	a0 2d       	mov	r26, r0
     eec:	24 81       	ldd	r18, Z+4	; 0x04
     eee:	35 81       	ldd	r19, Z+5	; 0x05
     ef0:	46 81       	ldd	r20, Z+6	; 0x06
     ef2:	57 81       	ldd	r21, Z+7	; 0x07
     ef4:	28 17       	cp	r18, r24
     ef6:	39 07       	cpc	r19, r25
     ef8:	4a 07       	cpc	r20, r26
     efa:	5b 07       	cpc	r21, r27
     efc:	18 f4       	brcc	.+6      	; 0xf04 <__fpcmp_parts_f+0x8e>
     efe:	11 23       	and	r17, r17
     f00:	41 f0       	breq	.+16     	; 0xf12 <__fpcmp_parts_f+0x9c>
     f02:	0a c0       	rjmp	.+20     	; 0xf18 <__fpcmp_parts_f+0xa2>
     f04:	82 17       	cp	r24, r18
     f06:	93 07       	cpc	r25, r19
     f08:	a4 07       	cpc	r26, r20
     f0a:	b5 07       	cpc	r27, r21
     f0c:	40 f4       	brcc	.+16     	; 0xf1e <__fpcmp_parts_f+0xa8>
     f0e:	11 23       	and	r17, r17
     f10:	19 f0       	breq	.+6      	; 0xf18 <__fpcmp_parts_f+0xa2>
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	05 c0       	rjmp	.+10     	; 0xf22 <__fpcmp_parts_f+0xac>
     f18:	6f ef       	ldi	r22, 0xFF	; 255
     f1a:	7f ef       	ldi	r23, 0xFF	; 255
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <__fpcmp_parts_f+0xac>
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	cb 01       	movw	r24, r22
     f24:	1f 91       	pop	r17
     f26:	08 95       	ret

00000f28 <ADC_init>:


/*
 * Initialize adc with the desired ref voltage and prescaler
 */
void ADC_init(const ADC_ConfigType* Config_Ptr){
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <ADC_init+0x6>
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	9a 83       	std	Y+2, r25	; 0x02
     f34:	89 83       	std	Y+1, r24	; 0x01
	/*clear the first to bits in admux register then add the ref volt bits*/
	ADMUX=(ADMUX & 0x3f)|((Config_Ptr->ref_volt)<<REFS0);
     f36:	a7 e2       	ldi	r26, 0x27	; 39
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e7 e2       	ldi	r30, 0x27	; 39
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	28 2f       	mov	r18, r24
     f42:	2f 73       	andi	r18, 0x3F	; 63
     f44:	e9 81       	ldd	r30, Y+1	; 0x01
     f46:	fa 81       	ldd	r31, Y+2	; 0x02
     f48:	80 81       	ld	r24, Z
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	00 24       	eor	r0, r0
     f50:	96 95       	lsr	r25
     f52:	87 95       	ror	r24
     f54:	07 94       	ror	r0
     f56:	96 95       	lsr	r25
     f58:	87 95       	ror	r24
     f5a:	07 94       	ror	r0
     f5c:	98 2f       	mov	r25, r24
     f5e:	80 2d       	mov	r24, r0
     f60:	82 2b       	or	r24, r18
     f62:	8c 93       	st	X, r24
	/*clear the last 3 bits in ADCSRA register and add the prescaler bits*/
	ADCSRA=(ADCSRA & 0xf8)|(Config_Ptr->prescaler);
     f64:	a6 e2       	ldi	r26, 0x26	; 38
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e6 e2       	ldi	r30, 0x26	; 38
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	98 2f       	mov	r25, r24
     f70:	98 7f       	andi	r25, 0xF8	; 248
     f72:	e9 81       	ldd	r30, Y+1	; 0x01
     f74:	fa 81       	ldd	r31, Y+2	; 0x02
     f76:	81 81       	ldd	r24, Z+1	; 0x01
     f78:	89 2b       	or	r24, r25
     f7a:	8c 93       	st	X, r24
	ADCSRA|=(1<<ADEN); /*enable ADC*/
     f7c:	a6 e2       	ldi	r26, 0x26	; 38
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e6 e2       	ldi	r30, 0x26	; 38
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	80 68       	ori	r24, 0x80	; 128
     f88:	8c 93       	st	X, r24
}
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <ADC_readChannel>:

/*
 * Read the desired channel from the adc
 */
uint16 ADC_readChannel(ADC_ChannelNmber channel_num)
{
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	0f 92       	push	r0
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	87 70       	andi	r24, 0x07	; 7
     fa4:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     fa6:	a7 e2       	ldi	r26, 0x27	; 39
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e7 e2       	ldi	r30, 0x27	; 39
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	80 7e       	andi	r24, 0xE0	; 224
     fb2:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
     fb4:	a7 e2       	ldi	r26, 0x27	; 39
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e7 e2       	ldi	r30, 0x27	; 39
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	90 81       	ld	r25, Z
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	89 2b       	or	r24, r25
     fc2:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
     fc4:	a6 e2       	ldi	r26, 0x26	; 38
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e6 e2       	ldi	r30, 0x26	; 38
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	80 64       	ori	r24, 0x40	; 64
     fd0:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
     fd2:	e6 e2       	ldi	r30, 0x26	; 38
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	88 2f       	mov	r24, r24
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	80 71       	andi	r24, 0x10	; 16
     fde:	90 70       	andi	r25, 0x00	; 0
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	b9 f3       	breq	.-18     	; 0xfd2 <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
     fe4:	a6 e2       	ldi	r26, 0x26	; 38
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e6 e2       	ldi	r30, 0x26	; 38
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	80 61       	ori	r24, 0x10	; 16
     ff0:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
     ff2:	e4 e2       	ldi	r30, 0x24	; 36
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	91 81       	ldd	r25, Z+1	; 0x01
}
     ffa:	0f 90       	pop	r0
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <fanControl>:
 *  b. If the temperature is greater than or equal 30C turn on the fan with 25% of its maximum speed.
 *  c. If the temperature is greater than or equal 60C turn on the fan with 50% of its maximum speed.
 *  d. If the temperature is greater than or equal 90C turn on the fan with 75% of its maximum speed.
 *  e. If the temperature is greater than or equal 120C turn on the fan with 100% of its maximum speed.
 */
void fanControl(uint8 temp){
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	0f 92       	push	r0
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	89 83       	std	Y+1, r24	; 0x01
	if(temp<30){
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	8e 31       	cpi	r24, 0x1E	; 30
    1012:	38 f4       	brcc	.+14     	; 0x1022 <fanControl+0x20>
		DcMotor_Rotate(MOTOR_STOP,0);
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	60 e0       	ldi	r22, 0x00	; 0
    1018:	0e 94 3e 0c 	call	0x187c	; 0x187c <DcMotor_Rotate>
		fanCurrentState=FAN_OFF;
    101c:	10 92 84 01 	sts	0x0184, r1
    1020:	34 c0       	rjmp	.+104    	; 0x108a <fanControl+0x88>
	}
	else if(temp>=30 && temp<60){
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	8e 31       	cpi	r24, 0x1E	; 30
    1026:	58 f0       	brcs	.+22     	; 0x103e <fanControl+0x3c>
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	8c 33       	cpi	r24, 0x3C	; 60
    102c:	40 f4       	brcc	.+16     	; 0x103e <fanControl+0x3c>
		DcMotor_Rotate(MOTOR_CLOCKWISE,25);
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	69 e1       	ldi	r22, 0x19	; 25
    1032:	0e 94 3e 0c 	call	0x187c	; 0x187c <DcMotor_Rotate>
		fanCurrentState=FAN_ON;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	80 93 84 01 	sts	0x0184, r24
    103c:	26 c0       	rjmp	.+76     	; 0x108a <fanControl+0x88>
	}
	else if(temp>=60 && temp<90){
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	8c 33       	cpi	r24, 0x3C	; 60
    1042:	58 f0       	brcs	.+22     	; 0x105a <fanControl+0x58>
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	8a 35       	cpi	r24, 0x5A	; 90
    1048:	40 f4       	brcc	.+16     	; 0x105a <fanControl+0x58>
		DcMotor_Rotate(MOTOR_CLOCKWISE,50);
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	62 e3       	ldi	r22, 0x32	; 50
    104e:	0e 94 3e 0c 	call	0x187c	; 0x187c <DcMotor_Rotate>
		fanCurrentState=FAN_ON;
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	80 93 84 01 	sts	0x0184, r24
    1058:	18 c0       	rjmp	.+48     	; 0x108a <fanControl+0x88>
	}
	else if(temp>=90 && temp<120){
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	8a 35       	cpi	r24, 0x5A	; 90
    105e:	58 f0       	brcs	.+22     	; 0x1076 <fanControl+0x74>
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	88 37       	cpi	r24, 0x78	; 120
    1064:	40 f4       	brcc	.+16     	; 0x1076 <fanControl+0x74>
		DcMotor_Rotate(MOTOR_CLOCKWISE,75);
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	6b e4       	ldi	r22, 0x4B	; 75
    106a:	0e 94 3e 0c 	call	0x187c	; 0x187c <DcMotor_Rotate>
		fanCurrentState=FAN_ON;
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	80 93 84 01 	sts	0x0184, r24
    1074:	0a c0       	rjmp	.+20     	; 0x108a <fanControl+0x88>
	}
	else if(temp>=120){
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	88 37       	cpi	r24, 0x78	; 120
    107a:	38 f0       	brcs	.+14     	; 0x108a <fanControl+0x88>
		DcMotor_Rotate(MOTOR_CLOCKWISE,100);
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	64 e6       	ldi	r22, 0x64	; 100
    1080:	0e 94 3e 0c 	call	0x187c	; 0x187c <DcMotor_Rotate>
		fanCurrentState=FAN_ON;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	80 93 84 01 	sts	0x0184, r24
	}
}
    108a:	0f 90       	pop	r0
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <main>:
/*************************************************************************
 *                         MAIN FUNCTION                                 *
 *************************************************************************/


int main(void){
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	00 d0       	rcall	.+0      	; 0x1098 <main+0x6>
    1098:	0f 92       	push	r0
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
	/*create adc config struct to setup adc with internal reference voltage
	 * and prescaler Fcpu/8 */
	ADC_ConfigType adc_config={ADC_INTERNAL_REF,ADC_DIV_8};
    109e:	83 e0       	ldi	r24, 0x03	; 3
    10a0:	8a 83       	std	Y+2, r24	; 0x02
    10a2:	83 e0       	ldi	r24, 0x03	; 3
    10a4:	8b 83       	std	Y+3, r24	; 0x03
	LCD_init();/*initialize lcd*/
    10a6:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_init>
	/*move cursor to the 4th column to display the fan state line */
	LCD_moveCursor(0,4);
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	64 e0       	ldi	r22, 0x04	; 4
    10ae:	0e 94 cb 12 	call	0x2596	; 0x2596 <LCD_moveCursor>
	/*display the fan state line*/
	LCD_displayString("Fan is ");
    10b2:	80 e6       	ldi	r24, 0x60	; 96
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 a0 12 	call	0x2540	; 0x2540 <LCD_displayString>
	/*move cursor to the 3rd column in the second row to display the temp line*/
	LCD_moveCursor(1,3);
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	63 e0       	ldi	r22, 0x03	; 3
    10be:	0e 94 cb 12 	call	0x2596	; 0x2596 <LCD_moveCursor>
	/*display the temperature line*/
	LCD_displayString("Temp =     c");
    10c2:	88 e6       	ldi	r24, 0x68	; 104
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	0e 94 a0 12 	call	0x2540	; 0x2540 <LCD_displayString>
	/*initialize adc with the config created*/
	ADC_init(&adc_config);
    10ca:	ce 01       	movw	r24, r28
    10cc:	02 96       	adiw	r24, 0x02	; 2
    10ce:	0e 94 94 07 	call	0xf28	; 0xf28 <ADC_init>
	/*initialize motor*/
	DcMotor_init();
    10d2:	0e 94 23 0c 	call	0x1846	; 0x1846 <DcMotor_init>
	uint8 temp=0;/*variable to hold the temperature value */
    10d6:	19 82       	std	Y+1, r1	; 0x01
	while(1){
		/*Display the status of the fan every time it gets updated*/
		LCD_moveCursor(0,11);
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	6b e0       	ldi	r22, 0x0B	; 11
    10dc:	0e 94 cb 12 	call	0x2596	; 0x2596 <LCD_moveCursor>
		if(fanCurrentState==FAN_OFF){
    10e0:	80 91 84 01 	lds	r24, 0x0184
    10e4:	88 23       	and	r24, r24
    10e6:	29 f4       	brne	.+10     	; 0x10f2 <main+0x60>
			LCD_displayString("off");
    10e8:	85 e7       	ldi	r24, 0x75	; 117
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	0e 94 a0 12 	call	0x2540	; 0x2540 <LCD_displayString>
    10f0:	0b c0       	rjmp	.+22     	; 0x1108 <main+0x76>
		}
		else if(fanCurrentState==FAN_ON){
    10f2:	80 91 84 01 	lds	r24, 0x0184
    10f6:	81 30       	cpi	r24, 0x01	; 1
    10f8:	39 f4       	brne	.+14     	; 0x1108 <main+0x76>
			LCD_displayString("on");
    10fa:	89 e7       	ldi	r24, 0x79	; 121
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0e 94 a0 12 	call	0x2540	; 0x2540 <LCD_displayString>
			LCD_displayChar(' ');
    1102:	80 e2       	ldi	r24, 0x20	; 32
    1104:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <LCD_displayChar>
		}
		/*display the current temp every time it gets updated*/
		LCD_moveCursor(1,10);
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	6a e0       	ldi	r22, 0x0A	; 10
    110c:	0e 94 cb 12 	call	0x2596	; 0x2596 <LCD_moveCursor>
		if(temp>=100){
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	84 36       	cpi	r24, 0x64	; 100
    1114:	30 f0       	brcs	.+12     	; 0x1122 <main+0x90>
			LCD_integerToString(temp);
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	88 2f       	mov	r24, r24
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 30 13 	call	0x2660	; 0x2660 <LCD_integerToString>
    1120:	08 c0       	rjmp	.+16     	; 0x1132 <main+0xa0>

		}
		else{
			LCD_integerToString(temp);
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	0e 94 30 13 	call	0x2660	; 0x2660 <LCD_integerToString>
			LCD_displayChar(' ');
    112c:	80 e2       	ldi	r24, 0x20	; 32
    112e:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <LCD_displayChar>
		}
		temp=LM35_getTemperature(); /*get the current temperature*/
    1132:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LM35_getTemperature>
    1136:	89 83       	std	Y+1, r24	; 0x01
		fanControl(temp);/*control the speed of the fan based on the current temperature*/
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	0e 94 01 08 	call	0x1002	; 0x1002 <fanControl>
    113e:	cc cf       	rjmp	.-104    	; 0x10d8 <main+0x46>

00001140 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	00 d0       	rcall	.+0      	; 0x1146 <GPIO_setupPinDirection+0x6>
    1146:	00 d0       	rcall	.+0      	; 0x1148 <GPIO_setupPinDirection+0x8>
    1148:	0f 92       	push	r0
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	89 83       	std	Y+1, r24	; 0x01
    1150:	6a 83       	std	Y+2, r22	; 0x02
    1152:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	88 30       	cpi	r24, 0x08	; 8
    1158:	08 f0       	brcs	.+2      	; 0x115c <GPIO_setupPinDirection+0x1c>
    115a:	d5 c0       	rjmp	.+426    	; 0x1306 <GPIO_setupPinDirection+0x1c6>
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	84 30       	cpi	r24, 0x04	; 4
    1160:	08 f0       	brcs	.+2      	; 0x1164 <GPIO_setupPinDirection+0x24>
    1162:	d1 c0       	rjmp	.+418    	; 0x1306 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	3d 83       	std	Y+5, r19	; 0x05
    116c:	2c 83       	std	Y+4, r18	; 0x04
    116e:	8c 81       	ldd	r24, Y+4	; 0x04
    1170:	9d 81       	ldd	r25, Y+5	; 0x05
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	91 05       	cpc	r25, r1
    1176:	09 f4       	brne	.+2      	; 0x117a <GPIO_setupPinDirection+0x3a>
    1178:	43 c0       	rjmp	.+134    	; 0x1200 <GPIO_setupPinDirection+0xc0>
    117a:	2c 81       	ldd	r18, Y+4	; 0x04
    117c:	3d 81       	ldd	r19, Y+5	; 0x05
    117e:	22 30       	cpi	r18, 0x02	; 2
    1180:	31 05       	cpc	r19, r1
    1182:	2c f4       	brge	.+10     	; 0x118e <GPIO_setupPinDirection+0x4e>
    1184:	8c 81       	ldd	r24, Y+4	; 0x04
    1186:	9d 81       	ldd	r25, Y+5	; 0x05
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	71 f0       	breq	.+28     	; 0x11a8 <GPIO_setupPinDirection+0x68>
    118c:	bc c0       	rjmp	.+376    	; 0x1306 <GPIO_setupPinDirection+0x1c6>
    118e:	2c 81       	ldd	r18, Y+4	; 0x04
    1190:	3d 81       	ldd	r19, Y+5	; 0x05
    1192:	22 30       	cpi	r18, 0x02	; 2
    1194:	31 05       	cpc	r19, r1
    1196:	09 f4       	brne	.+2      	; 0x119a <GPIO_setupPinDirection+0x5a>
    1198:	5f c0       	rjmp	.+190    	; 0x1258 <GPIO_setupPinDirection+0x118>
    119a:	8c 81       	ldd	r24, Y+4	; 0x04
    119c:	9d 81       	ldd	r25, Y+5	; 0x05
    119e:	83 30       	cpi	r24, 0x03	; 3
    11a0:	91 05       	cpc	r25, r1
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <GPIO_setupPinDirection+0x66>
    11a4:	85 c0       	rjmp	.+266    	; 0x12b0 <GPIO_setupPinDirection+0x170>
    11a6:	af c0       	rjmp	.+350    	; 0x1306 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	81 30       	cpi	r24, 0x01	; 1
    11ac:	a1 f4       	brne	.+40     	; 0x11d6 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    11ae:	aa e3       	ldi	r26, 0x3A	; 58
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	ea e3       	ldi	r30, 0x3A	; 58
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	48 2f       	mov	r20, r24
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	02 2e       	mov	r0, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <GPIO_setupPinDirection+0x8c>
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	0a 94       	dec	r0
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <GPIO_setupPinDirection+0x88>
    11d0:	84 2b       	or	r24, r20
    11d2:	8c 93       	st	X, r24
    11d4:	98 c0       	rjmp	.+304    	; 0x1306 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    11d6:	aa e3       	ldi	r26, 0x3A	; 58
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	ea e3       	ldi	r30, 0x3A	; 58
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <GPIO_setupPinDirection+0xb4>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <GPIO_setupPinDirection+0xb0>
    11f8:	80 95       	com	r24
    11fa:	84 23       	and	r24, r20
    11fc:	8c 93       	st	X, r24
    11fe:	83 c0       	rjmp	.+262    	; 0x1306 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	a1 f4       	brne	.+40     	; 0x122e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1206:	a7 e3       	ldi	r26, 0x37	; 55
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e7 e3       	ldi	r30, 0x37	; 55
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	48 2f       	mov	r20, r24
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	02 2e       	mov	r0, r18
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <GPIO_setupPinDirection+0xe4>
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	0a 94       	dec	r0
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <GPIO_setupPinDirection+0xe0>
    1228:	84 2b       	or	r24, r20
    122a:	8c 93       	st	X, r24
    122c:	6c c0       	rjmp	.+216    	; 0x1306 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    122e:	a7 e3       	ldi	r26, 0x37	; 55
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e7 e3       	ldi	r30, 0x37	; 55
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	48 2f       	mov	r20, r24
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	02 2e       	mov	r0, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <GPIO_setupPinDirection+0x10c>
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	0a 94       	dec	r0
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <GPIO_setupPinDirection+0x108>
    1250:	80 95       	com	r24
    1252:	84 23       	and	r24, r20
    1254:	8c 93       	st	X, r24
    1256:	57 c0       	rjmp	.+174    	; 0x1306 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	a1 f4       	brne	.+40     	; 0x1286 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    125e:	a4 e3       	ldi	r26, 0x34	; 52
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e4 e3       	ldi	r30, 0x34	; 52
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <GPIO_setupPinDirection+0x13c>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <GPIO_setupPinDirection+0x138>
    1280:	84 2b       	or	r24, r20
    1282:	8c 93       	st	X, r24
    1284:	40 c0       	rjmp	.+128    	; 0x1306 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1286:	a4 e3       	ldi	r26, 0x34	; 52
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e4 e3       	ldi	r30, 0x34	; 52
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	48 2f       	mov	r20, r24
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	02 2e       	mov	r0, r18
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <GPIO_setupPinDirection+0x164>
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	0a 94       	dec	r0
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <GPIO_setupPinDirection+0x160>
    12a8:	80 95       	com	r24
    12aa:	84 23       	and	r24, r20
    12ac:	8c 93       	st	X, r24
    12ae:	2b c0       	rjmp	.+86     	; 0x1306 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	a1 f4       	brne	.+40     	; 0x12de <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    12b6:	a1 e3       	ldi	r26, 0x31	; 49
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e1 e3       	ldi	r30, 0x31	; 49
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	48 2f       	mov	r20, r24
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	02 2e       	mov	r0, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <GPIO_setupPinDirection+0x194>
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	0a 94       	dec	r0
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <GPIO_setupPinDirection+0x190>
    12d8:	84 2b       	or	r24, r20
    12da:	8c 93       	st	X, r24
    12dc:	14 c0       	rjmp	.+40     	; 0x1306 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    12de:	a1 e3       	ldi	r26, 0x31	; 49
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e1 e3       	ldi	r30, 0x31	; 49
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	48 2f       	mov	r20, r24
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	02 2e       	mov	r0, r18
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <GPIO_setupPinDirection+0x1bc>
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	0a 94       	dec	r0
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <GPIO_setupPinDirection+0x1b8>
    1300:	80 95       	com	r24
    1302:	84 23       	and	r24, r20
    1304:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	00 d0       	rcall	.+0      	; 0x131c <GPIO_writePin+0x6>
    131c:	00 d0       	rcall	.+0      	; 0x131e <GPIO_writePin+0x8>
    131e:	0f 92       	push	r0
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	89 83       	std	Y+1, r24	; 0x01
    1326:	6a 83       	std	Y+2, r22	; 0x02
    1328:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	88 30       	cpi	r24, 0x08	; 8
    132e:	08 f0       	brcs	.+2      	; 0x1332 <GPIO_writePin+0x1c>
    1330:	d5 c0       	rjmp	.+426    	; 0x14dc <GPIO_writePin+0x1c6>
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	84 30       	cpi	r24, 0x04	; 4
    1336:	08 f0       	brcs	.+2      	; 0x133a <GPIO_writePin+0x24>
    1338:	d1 c0       	rjmp	.+418    	; 0x14dc <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	3d 83       	std	Y+5, r19	; 0x05
    1342:	2c 83       	std	Y+4, r18	; 0x04
    1344:	8c 81       	ldd	r24, Y+4	; 0x04
    1346:	9d 81       	ldd	r25, Y+5	; 0x05
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	91 05       	cpc	r25, r1
    134c:	09 f4       	brne	.+2      	; 0x1350 <GPIO_writePin+0x3a>
    134e:	43 c0       	rjmp	.+134    	; 0x13d6 <GPIO_writePin+0xc0>
    1350:	2c 81       	ldd	r18, Y+4	; 0x04
    1352:	3d 81       	ldd	r19, Y+5	; 0x05
    1354:	22 30       	cpi	r18, 0x02	; 2
    1356:	31 05       	cpc	r19, r1
    1358:	2c f4       	brge	.+10     	; 0x1364 <GPIO_writePin+0x4e>
    135a:	8c 81       	ldd	r24, Y+4	; 0x04
    135c:	9d 81       	ldd	r25, Y+5	; 0x05
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	71 f0       	breq	.+28     	; 0x137e <GPIO_writePin+0x68>
    1362:	bc c0       	rjmp	.+376    	; 0x14dc <GPIO_writePin+0x1c6>
    1364:	2c 81       	ldd	r18, Y+4	; 0x04
    1366:	3d 81       	ldd	r19, Y+5	; 0x05
    1368:	22 30       	cpi	r18, 0x02	; 2
    136a:	31 05       	cpc	r19, r1
    136c:	09 f4       	brne	.+2      	; 0x1370 <GPIO_writePin+0x5a>
    136e:	5f c0       	rjmp	.+190    	; 0x142e <GPIO_writePin+0x118>
    1370:	8c 81       	ldd	r24, Y+4	; 0x04
    1372:	9d 81       	ldd	r25, Y+5	; 0x05
    1374:	83 30       	cpi	r24, 0x03	; 3
    1376:	91 05       	cpc	r25, r1
    1378:	09 f4       	brne	.+2      	; 0x137c <GPIO_writePin+0x66>
    137a:	85 c0       	rjmp	.+266    	; 0x1486 <GPIO_writePin+0x170>
    137c:	af c0       	rjmp	.+350    	; 0x14dc <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	a1 f4       	brne	.+40     	; 0x13ac <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1384:	ab e3       	ldi	r26, 0x3B	; 59
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	eb e3       	ldi	r30, 0x3B	; 59
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	48 2f       	mov	r20, r24
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	02 2e       	mov	r0, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <GPIO_writePin+0x8c>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	0a 94       	dec	r0
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <GPIO_writePin+0x88>
    13a6:	84 2b       	or	r24, r20
    13a8:	8c 93       	st	X, r24
    13aa:	98 c0       	rjmp	.+304    	; 0x14dc <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    13ac:	ab e3       	ldi	r26, 0x3B	; 59
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	eb e3       	ldi	r30, 0x3B	; 59
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	48 2f       	mov	r20, r24
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	02 2e       	mov	r0, r18
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <GPIO_writePin+0xb4>
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	0a 94       	dec	r0
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <GPIO_writePin+0xb0>
    13ce:	80 95       	com	r24
    13d0:	84 23       	and	r24, r20
    13d2:	8c 93       	st	X, r24
    13d4:	83 c0       	rjmp	.+262    	; 0x14dc <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	a1 f4       	brne	.+40     	; 0x1404 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    13dc:	a8 e3       	ldi	r26, 0x38	; 56
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e8 e3       	ldi	r30, 0x38	; 56
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	48 2f       	mov	r20, r24
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	02 2e       	mov	r0, r18
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <GPIO_writePin+0xe4>
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	0a 94       	dec	r0
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <GPIO_writePin+0xe0>
    13fe:	84 2b       	or	r24, r20
    1400:	8c 93       	st	X, r24
    1402:	6c c0       	rjmp	.+216    	; 0x14dc <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1404:	a8 e3       	ldi	r26, 0x38	; 56
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e8 e3       	ldi	r30, 0x38	; 56
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	48 2f       	mov	r20, r24
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	02 2e       	mov	r0, r18
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <GPIO_writePin+0x10c>
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	0a 94       	dec	r0
    1424:	e2 f7       	brpl	.-8      	; 0x141e <GPIO_writePin+0x108>
    1426:	80 95       	com	r24
    1428:	84 23       	and	r24, r20
    142a:	8c 93       	st	X, r24
    142c:	57 c0       	rjmp	.+174    	; 0x14dc <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	a1 f4       	brne	.+40     	; 0x145c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1434:	a5 e3       	ldi	r26, 0x35	; 53
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e5 e3       	ldi	r30, 0x35	; 53
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 2e       	mov	r0, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <GPIO_writePin+0x13c>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	0a 94       	dec	r0
    1454:	e2 f7       	brpl	.-8      	; 0x144e <GPIO_writePin+0x138>
    1456:	84 2b       	or	r24, r20
    1458:	8c 93       	st	X, r24
    145a:	40 c0       	rjmp	.+128    	; 0x14dc <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    145c:	a5 e3       	ldi	r26, 0x35	; 53
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e5 e3       	ldi	r30, 0x35	; 53
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	48 2f       	mov	r20, r24
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 2e       	mov	r0, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <GPIO_writePin+0x164>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	0a 94       	dec	r0
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <GPIO_writePin+0x160>
    147e:	80 95       	com	r24
    1480:	84 23       	and	r24, r20
    1482:	8c 93       	st	X, r24
    1484:	2b c0       	rjmp	.+86     	; 0x14dc <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	81 30       	cpi	r24, 0x01	; 1
    148a:	a1 f4       	brne	.+40     	; 0x14b4 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    148c:	a2 e3       	ldi	r26, 0x32	; 50
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e2 e3       	ldi	r30, 0x32	; 50
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	48 2f       	mov	r20, r24
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 2e       	mov	r0, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <GPIO_writePin+0x194>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	0a 94       	dec	r0
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <GPIO_writePin+0x190>
    14ae:	84 2b       	or	r24, r20
    14b0:	8c 93       	st	X, r24
    14b2:	14 c0       	rjmp	.+40     	; 0x14dc <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    14b4:	a2 e3       	ldi	r26, 0x32	; 50
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e2 e3       	ldi	r30, 0x32	; 50
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	48 2f       	mov	r20, r24
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	02 2e       	mov	r0, r18
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <GPIO_writePin+0x1bc>
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	0a 94       	dec	r0
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <GPIO_writePin+0x1b8>
    14d6:	80 95       	com	r24
    14d8:	84 23       	and	r24, r20
    14da:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <GPIO_readPin+0x6>
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <GPIO_readPin+0x8>
    14f4:	0f 92       	push	r0
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	8a 83       	std	Y+2, r24	; 0x02
    14fc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    14fe:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	88 30       	cpi	r24, 0x08	; 8
    1504:	08 f0       	brcs	.+2      	; 0x1508 <GPIO_readPin+0x1c>
    1506:	84 c0       	rjmp	.+264    	; 0x1610 <GPIO_readPin+0x124>
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	84 30       	cpi	r24, 0x04	; 4
    150c:	08 f0       	brcs	.+2      	; 0x1510 <GPIO_readPin+0x24>
    150e:	80 c0       	rjmp	.+256    	; 0x1610 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	3d 83       	std	Y+5, r19	; 0x05
    1518:	2c 83       	std	Y+4, r18	; 0x04
    151a:	4c 81       	ldd	r20, Y+4	; 0x04
    151c:	5d 81       	ldd	r21, Y+5	; 0x05
    151e:	41 30       	cpi	r20, 0x01	; 1
    1520:	51 05       	cpc	r21, r1
    1522:	79 f1       	breq	.+94     	; 0x1582 <GPIO_readPin+0x96>
    1524:	8c 81       	ldd	r24, Y+4	; 0x04
    1526:	9d 81       	ldd	r25, Y+5	; 0x05
    1528:	82 30       	cpi	r24, 0x02	; 2
    152a:	91 05       	cpc	r25, r1
    152c:	34 f4       	brge	.+12     	; 0x153a <GPIO_readPin+0x4e>
    152e:	2c 81       	ldd	r18, Y+4	; 0x04
    1530:	3d 81       	ldd	r19, Y+5	; 0x05
    1532:	21 15       	cp	r18, r1
    1534:	31 05       	cpc	r19, r1
    1536:	69 f0       	breq	.+26     	; 0x1552 <GPIO_readPin+0x66>
    1538:	6b c0       	rjmp	.+214    	; 0x1610 <GPIO_readPin+0x124>
    153a:	4c 81       	ldd	r20, Y+4	; 0x04
    153c:	5d 81       	ldd	r21, Y+5	; 0x05
    153e:	42 30       	cpi	r20, 0x02	; 2
    1540:	51 05       	cpc	r21, r1
    1542:	b9 f1       	breq	.+110    	; 0x15b2 <GPIO_readPin+0xc6>
    1544:	8c 81       	ldd	r24, Y+4	; 0x04
    1546:	9d 81       	ldd	r25, Y+5	; 0x05
    1548:	83 30       	cpi	r24, 0x03	; 3
    154a:	91 05       	cpc	r25, r1
    154c:	09 f4       	brne	.+2      	; 0x1550 <GPIO_readPin+0x64>
    154e:	49 c0       	rjmp	.+146    	; 0x15e2 <GPIO_readPin+0xf6>
    1550:	5f c0       	rjmp	.+190    	; 0x1610 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1552:	e9 e3       	ldi	r30, 0x39	; 57
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	88 2f       	mov	r24, r24
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	a9 01       	movw	r20, r18
    1564:	02 c0       	rjmp	.+4      	; 0x156a <GPIO_readPin+0x7e>
    1566:	55 95       	asr	r21
    1568:	47 95       	ror	r20
    156a:	8a 95       	dec	r24
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <GPIO_readPin+0x7a>
    156e:	ca 01       	movw	r24, r20
    1570:	81 70       	andi	r24, 0x01	; 1
    1572:	90 70       	andi	r25, 0x00	; 0
    1574:	88 23       	and	r24, r24
    1576:	19 f0       	breq	.+6      	; 0x157e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	49 c0       	rjmp	.+146    	; 0x1610 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    157e:	19 82       	std	Y+1, r1	; 0x01
    1580:	47 c0       	rjmp	.+142    	; 0x1610 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1582:	e6 e3       	ldi	r30, 0x36	; 54
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	88 2f       	mov	r24, r24
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	a9 01       	movw	r20, r18
    1594:	02 c0       	rjmp	.+4      	; 0x159a <GPIO_readPin+0xae>
    1596:	55 95       	asr	r21
    1598:	47 95       	ror	r20
    159a:	8a 95       	dec	r24
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <GPIO_readPin+0xaa>
    159e:	ca 01       	movw	r24, r20
    15a0:	81 70       	andi	r24, 0x01	; 1
    15a2:	90 70       	andi	r25, 0x00	; 0
    15a4:	88 23       	and	r24, r24
    15a6:	19 f0       	breq	.+6      	; 0x15ae <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	89 83       	std	Y+1, r24	; 0x01
    15ac:	31 c0       	rjmp	.+98     	; 0x1610 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15ae:	19 82       	std	Y+1, r1	; 0x01
    15b0:	2f c0       	rjmp	.+94     	; 0x1610 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    15b2:	e3 e3       	ldi	r30, 0x33	; 51
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	88 2f       	mov	r24, r24
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	a9 01       	movw	r20, r18
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <GPIO_readPin+0xde>
    15c6:	55 95       	asr	r21
    15c8:	47 95       	ror	r20
    15ca:	8a 95       	dec	r24
    15cc:	e2 f7       	brpl	.-8      	; 0x15c6 <GPIO_readPin+0xda>
    15ce:	ca 01       	movw	r24, r20
    15d0:	81 70       	andi	r24, 0x01	; 1
    15d2:	90 70       	andi	r25, 0x00	; 0
    15d4:	88 23       	and	r24, r24
    15d6:	19 f0       	breq	.+6      	; 0x15de <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	89 83       	std	Y+1, r24	; 0x01
    15dc:	19 c0       	rjmp	.+50     	; 0x1610 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15de:	19 82       	std	Y+1, r1	; 0x01
    15e0:	17 c0       	rjmp	.+46     	; 0x1610 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    15e2:	e0 e3       	ldi	r30, 0x30	; 48
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	88 2f       	mov	r24, r24
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	a9 01       	movw	r20, r18
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <GPIO_readPin+0x10e>
    15f6:	55 95       	asr	r21
    15f8:	47 95       	ror	r20
    15fa:	8a 95       	dec	r24
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <GPIO_readPin+0x10a>
    15fe:	ca 01       	movw	r24, r20
    1600:	81 70       	andi	r24, 0x01	; 1
    1602:	90 70       	andi	r25, 0x00	; 0
    1604:	88 23       	and	r24, r24
    1606:	19 f0       	breq	.+6      	; 0x160e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	89 83       	std	Y+1, r24	; 0x01
    160c:	01 c0       	rjmp	.+2      	; 0x1610 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    160e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1610:	89 81       	ldd	r24, Y+1	; 0x01
}
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	00 d0       	rcall	.+0      	; 0x1628 <GPIO_setupPortDirection+0x6>
    1628:	00 d0       	rcall	.+0      	; 0x162a <GPIO_setupPortDirection+0x8>
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	84 30       	cpi	r24, 0x04	; 4
    1636:	90 f5       	brcc	.+100    	; 0x169c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	3c 83       	std	Y+4, r19	; 0x04
    1640:	2b 83       	std	Y+3, r18	; 0x03
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	9c 81       	ldd	r25, Y+4	; 0x04
    1646:	81 30       	cpi	r24, 0x01	; 1
    1648:	91 05       	cpc	r25, r1
    164a:	d1 f0       	breq	.+52     	; 0x1680 <GPIO_setupPortDirection+0x5e>
    164c:	2b 81       	ldd	r18, Y+3	; 0x03
    164e:	3c 81       	ldd	r19, Y+4	; 0x04
    1650:	22 30       	cpi	r18, 0x02	; 2
    1652:	31 05       	cpc	r19, r1
    1654:	2c f4       	brge	.+10     	; 0x1660 <GPIO_setupPortDirection+0x3e>
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	9c 81       	ldd	r25, Y+4	; 0x04
    165a:	00 97       	sbiw	r24, 0x00	; 0
    165c:	61 f0       	breq	.+24     	; 0x1676 <GPIO_setupPortDirection+0x54>
    165e:	1e c0       	rjmp	.+60     	; 0x169c <GPIO_setupPortDirection+0x7a>
    1660:	2b 81       	ldd	r18, Y+3	; 0x03
    1662:	3c 81       	ldd	r19, Y+4	; 0x04
    1664:	22 30       	cpi	r18, 0x02	; 2
    1666:	31 05       	cpc	r19, r1
    1668:	81 f0       	breq	.+32     	; 0x168a <GPIO_setupPortDirection+0x68>
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	9c 81       	ldd	r25, Y+4	; 0x04
    166e:	83 30       	cpi	r24, 0x03	; 3
    1670:	91 05       	cpc	r25, r1
    1672:	81 f0       	breq	.+32     	; 0x1694 <GPIO_setupPortDirection+0x72>
    1674:	13 c0       	rjmp	.+38     	; 0x169c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1676:	ea e3       	ldi	r30, 0x3A	; 58
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	80 83       	st	Z, r24
    167e:	0e c0       	rjmp	.+28     	; 0x169c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1680:	e7 e3       	ldi	r30, 0x37	; 55
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	80 83       	st	Z, r24
    1688:	09 c0       	rjmp	.+18     	; 0x169c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    168a:	e4 e3       	ldi	r30, 0x34	; 52
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	80 83       	st	Z, r24
    1692:	04 c0       	rjmp	.+8      	; 0x169c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1694:	e1 e3       	ldi	r30, 0x31	; 49
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	80 83       	st	Z, r24
			break;
		}
	}
}
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	08 95       	ret

000016aa <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    16aa:	df 93       	push	r29
    16ac:	cf 93       	push	r28
    16ae:	00 d0       	rcall	.+0      	; 0x16b0 <GPIO_writePort+0x6>
    16b0:	00 d0       	rcall	.+0      	; 0x16b2 <GPIO_writePort+0x8>
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	89 83       	std	Y+1, r24	; 0x01
    16b8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	84 30       	cpi	r24, 0x04	; 4
    16be:	90 f5       	brcc	.+100    	; 0x1724 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	3c 83       	std	Y+4, r19	; 0x04
    16c8:	2b 83       	std	Y+3, r18	; 0x03
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	9c 81       	ldd	r25, Y+4	; 0x04
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	91 05       	cpc	r25, r1
    16d2:	d1 f0       	breq	.+52     	; 0x1708 <GPIO_writePort+0x5e>
    16d4:	2b 81       	ldd	r18, Y+3	; 0x03
    16d6:	3c 81       	ldd	r19, Y+4	; 0x04
    16d8:	22 30       	cpi	r18, 0x02	; 2
    16da:	31 05       	cpc	r19, r1
    16dc:	2c f4       	brge	.+10     	; 0x16e8 <GPIO_writePort+0x3e>
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	9c 81       	ldd	r25, Y+4	; 0x04
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	61 f0       	breq	.+24     	; 0x16fe <GPIO_writePort+0x54>
    16e6:	1e c0       	rjmp	.+60     	; 0x1724 <GPIO_writePort+0x7a>
    16e8:	2b 81       	ldd	r18, Y+3	; 0x03
    16ea:	3c 81       	ldd	r19, Y+4	; 0x04
    16ec:	22 30       	cpi	r18, 0x02	; 2
    16ee:	31 05       	cpc	r19, r1
    16f0:	81 f0       	breq	.+32     	; 0x1712 <GPIO_writePort+0x68>
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	9c 81       	ldd	r25, Y+4	; 0x04
    16f6:	83 30       	cpi	r24, 0x03	; 3
    16f8:	91 05       	cpc	r25, r1
    16fa:	81 f0       	breq	.+32     	; 0x171c <GPIO_writePort+0x72>
    16fc:	13 c0       	rjmp	.+38     	; 0x1724 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    16fe:	eb e3       	ldi	r30, 0x3B	; 59
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	80 83       	st	Z, r24
    1706:	0e c0       	rjmp	.+28     	; 0x1724 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1708:	e8 e3       	ldi	r30, 0x38	; 56
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	80 83       	st	Z, r24
    1710:	09 c0       	rjmp	.+18     	; 0x1724 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1712:	e5 e3       	ldi	r30, 0x35	; 53
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	80 83       	st	Z, r24
    171a:	04 c0       	rjmp	.+8      	; 0x1724 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    171c:	e2 e3       	ldi	r30, 0x32	; 50
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	80 83       	st	Z, r24
			break;
		}
	}
}
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	00 d0       	rcall	.+0      	; 0x1738 <GPIO_readPort+0x6>
    1738:	00 d0       	rcall	.+0      	; 0x173a <GPIO_readPort+0x8>
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1740:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	84 30       	cpi	r24, 0x04	; 4
    1746:	90 f5       	brcc	.+100    	; 0x17ac <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	3c 83       	std	Y+4, r19	; 0x04
    1750:	2b 83       	std	Y+3, r18	; 0x03
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	9c 81       	ldd	r25, Y+4	; 0x04
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	91 05       	cpc	r25, r1
    175a:	d1 f0       	breq	.+52     	; 0x1790 <GPIO_readPort+0x5e>
    175c:	2b 81       	ldd	r18, Y+3	; 0x03
    175e:	3c 81       	ldd	r19, Y+4	; 0x04
    1760:	22 30       	cpi	r18, 0x02	; 2
    1762:	31 05       	cpc	r19, r1
    1764:	2c f4       	brge	.+10     	; 0x1770 <GPIO_readPort+0x3e>
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	9c 81       	ldd	r25, Y+4	; 0x04
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	61 f0       	breq	.+24     	; 0x1786 <GPIO_readPort+0x54>
    176e:	1e c0       	rjmp	.+60     	; 0x17ac <GPIO_readPort+0x7a>
    1770:	2b 81       	ldd	r18, Y+3	; 0x03
    1772:	3c 81       	ldd	r19, Y+4	; 0x04
    1774:	22 30       	cpi	r18, 0x02	; 2
    1776:	31 05       	cpc	r19, r1
    1778:	81 f0       	breq	.+32     	; 0x179a <GPIO_readPort+0x68>
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
    177c:	9c 81       	ldd	r25, Y+4	; 0x04
    177e:	83 30       	cpi	r24, 0x03	; 3
    1780:	91 05       	cpc	r25, r1
    1782:	81 f0       	breq	.+32     	; 0x17a4 <GPIO_readPort+0x72>
    1784:	13 c0       	rjmp	.+38     	; 0x17ac <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1786:	e9 e3       	ldi	r30, 0x39	; 57
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	89 83       	std	Y+1, r24	; 0x01
    178e:	0e c0       	rjmp	.+28     	; 0x17ac <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1790:	e6 e3       	ldi	r30, 0x36	; 54
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	89 83       	std	Y+1, r24	; 0x01
    1798:	09 c0       	rjmp	.+18     	; 0x17ac <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    179a:	e3 e3       	ldi	r30, 0x33	; 51
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	89 83       	std	Y+1, r24	; 0x01
    17a2:	04 c0       	rjmp	.+8      	; 0x17ac <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    17a4:	e0 e3       	ldi	r30, 0x30	; 48
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	cf 91       	pop	r28
    17b8:	df 91       	pop	r29
    17ba:	08 95       	ret

000017bc <LM35_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void)
{
    17bc:	df 93       	push	r29
    17be:	cf 93       	push	r28
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <LM35_getTemperature+0x6>
    17c2:	0f 92       	push	r0
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    17c8:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    17ca:	1a 82       	std	Y+2, r1	; 0x02
    17cc:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    17ce:	82 e0       	ldi	r24, 0x02	; 2
    17d0:	0e 94 ca 07 	call	0xf94	; 0xf94 <ADC_readChannel>
    17d4:	9a 83       	std	Y+2, r25	; 0x02
    17d6:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	9a 81       	ldd	r25, Y+2	; 0x02
    17dc:	cc 01       	movw	r24, r24
    17de:	a0 e0       	ldi	r26, 0x00	; 0
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	26 e9       	ldi	r18, 0x96	; 150
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e0       	ldi	r20, 0x00	; 0
    17e8:	50 e0       	ldi	r21, 0x00	; 0
    17ea:	bc 01       	movw	r22, r24
    17ec:	cd 01       	movw	r24, r26
    17ee:	0e 94 c9 13 	call	0x2792	; 0x2792 <__mulsi3>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	bc 01       	movw	r22, r24
    17f8:	cd 01       	movw	r24, r26
    17fa:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	bc 01       	movw	r22, r24
    1804:	cd 01       	movw	r24, r26
    1806:	2a e0       	ldi	r18, 0x0A	; 10
    1808:	37 ed       	ldi	r19, 0xD7	; 215
    180a:	43 e2       	ldi	r20, 0x23	; 35
    180c:	50 e4       	ldi	r21, 0x40	; 64
    180e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	bc 01       	movw	r22, r24
    1818:	cd 01       	movw	r24, r26
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 ed       	ldi	r19, 0xD0	; 208
    181e:	4f eb       	ldi	r20, 0xBF	; 191
    1820:	54 e4       	ldi	r21, 0x44	; 68
    1822:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	bc 01       	movw	r22, r24
    182c:	cd 01       	movw	r24, r26
    182e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
}
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <DcMotor_init>:

/*************************************************************************
 *                         FUNCTIONS DEFINITIONS                         *
 *************************************************************************/

void DcMotor_init(){
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62

	/*Setup the two pins of the motor as output pins
	 * and write logic low to both of them to stop the motor
	 * at the beginning*/
	GPIO_setupPinDirection(DC_MOTOR_IN1_PORT,DC_MOTOR_IN1_PIN,PIN_OUTPUT);
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	41 e0       	ldi	r20, 0x01	; 1
    1854:	0e 94 a0 08 	call	0x1140	; 0x1140 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_IN2_PORT,DC_MOTOR_IN2_PIN,PIN_OUTPUT);
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	61 e0       	ldi	r22, 0x01	; 1
    185c:	41 e0       	ldi	r20, 0x01	; 1
    185e:	0e 94 a0 08 	call	0x1140	; 0x1140 <GPIO_setupPinDirection>
	GPIO_writePin(DC_MOTOR_IN1_PORT,DC_MOTOR_IN1_PIN,LOGIC_LOW);
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	60 e0       	ldi	r22, 0x00	; 0
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	0e 94 8b 09 	call	0x1316	; 0x1316 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_IN2_PORT,DC_MOTOR_IN2_PIN,LOGIC_LOW);
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	61 e0       	ldi	r22, 0x01	; 1
    1870:	40 e0       	ldi	r20, 0x00	; 0
    1872:	0e 94 8b 09 	call	0x1316	; 0x1316 <GPIO_writePin>
}
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <DcMotor_Rotate>:
void DcMotor_Rotate(DcMotor_State state,uint8 speed){
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	00 d0       	rcall	.+0      	; 0x1882 <DcMotor_Rotate+0x6>
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	89 83       	std	Y+1, r24	; 0x01
    1888:	6a 83       	std	Y+2, r22	; 0x02
	/*Setup the state of the motor by writing on it's pins*/
	GPIO_writePin(DC_MOTOR_IN1_PORT,DC_MOTOR_IN1_PIN,GET_BIT(state,0));
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	98 2f       	mov	r25, r24
    188e:	91 70       	andi	r25, 0x01	; 1
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	60 e0       	ldi	r22, 0x00	; 0
    1894:	49 2f       	mov	r20, r25
    1896:	0e 94 8b 09 	call	0x1316	; 0x1316 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_IN2_PORT,DC_MOTOR_IN2_PIN,GET_BIT(state,1));
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	88 2f       	mov	r24, r24
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	82 70       	andi	r24, 0x02	; 2
    18a2:	90 70       	andi	r25, 0x00	; 0
    18a4:	95 95       	asr	r25
    18a6:	87 95       	ror	r24
    18a8:	98 2f       	mov	r25, r24
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	61 e0       	ldi	r22, 0x01	; 1
    18ae:	49 2f       	mov	r20, r25
    18b0:	0e 94 8b 09 	call	0x1316	; 0x1316 <GPIO_writePin>
	/*setup the speed of the motor by generating a PWM signal with the suitable
	 * duty cycle to generate this speed*/
	PWM_Timer0_start(speed);
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	0e 94 7f 13 	call	0x26fe	; 0x26fe <PWM_Timer0_start>

}
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	08 95       	ret

000018c4 <LCD_sendCommand>:


/*
 * send command to lcd
 */
void LCD_sendCommand(uint8 command){
    18c4:	0f 93       	push	r16
    18c6:	1f 93       	push	r17
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	cd 54       	subi	r28, 0x4D	; 77
    18d2:	d0 40       	sbci	r29, 0x00	; 0
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
    18de:	fe 01       	movw	r30, r28
    18e0:	e3 5b       	subi	r30, 0xB3	; 179
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT,LCD_RS,0);
    18e6:	83 e0       	ldi	r24, 0x03	; 3
    18e8:	60 e0       	ldi	r22, 0x00	; 0
    18ea:	40 e0       	ldi	r20, 0x00	; 0
    18ec:	0e 94 8b 09 	call	0x1316	; 0x1316 <GPIO_writePin>
    18f0:	fe 01       	movw	r30, r28
    18f2:	e7 5b       	subi	r30, 0xB7	; 183
    18f4:	ff 4f       	sbci	r31, 0xFF	; 255
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	a0 e8       	ldi	r26, 0x80	; 128
    18fc:	bf e3       	ldi	r27, 0x3F	; 63
    18fe:	80 83       	st	Z, r24
    1900:	91 83       	std	Z+1, r25	; 0x01
    1902:	a2 83       	std	Z+2, r26	; 0x02
    1904:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1906:	8e 01       	movw	r16, r28
    1908:	0b 5b       	subi	r16, 0xBB	; 187
    190a:	1f 4f       	sbci	r17, 0xFF	; 255
    190c:	fe 01       	movw	r30, r28
    190e:	e7 5b       	subi	r30, 0xB7	; 183
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	60 81       	ld	r22, Z
    1914:	71 81       	ldd	r23, Z+1	; 0x01
    1916:	82 81       	ldd	r24, Z+2	; 0x02
    1918:	93 81       	ldd	r25, Z+3	; 0x03
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	4a e7       	ldi	r20, 0x7A	; 122
    1920:	53 e4       	ldi	r21, 0x43	; 67
    1922:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	f8 01       	movw	r30, r16
    192c:	80 83       	st	Z, r24
    192e:	91 83       	std	Z+1, r25	; 0x01
    1930:	a2 83       	std	Z+2, r26	; 0x02
    1932:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1934:	fe 01       	movw	r30, r28
    1936:	eb 5b       	subi	r30, 0xBB	; 187
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	60 81       	ld	r22, Z
    193c:	71 81       	ldd	r23, Z+1	; 0x01
    193e:	82 81       	ldd	r24, Z+2	; 0x02
    1940:	93 81       	ldd	r25, Z+3	; 0x03
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	40 e8       	ldi	r20, 0x80	; 128
    1948:	5f e3       	ldi	r21, 0x3F	; 63
    194a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    194e:	88 23       	and	r24, r24
    1950:	44 f4       	brge	.+16     	; 0x1962 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1952:	fe 01       	movw	r30, r28
    1954:	ed 5b       	subi	r30, 0xBD	; 189
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	91 83       	std	Z+1, r25	; 0x01
    195e:	80 83       	st	Z, r24
    1960:	64 c0       	rjmp	.+200    	; 0x1a2a <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1962:	fe 01       	movw	r30, r28
    1964:	eb 5b       	subi	r30, 0xBB	; 187
    1966:	ff 4f       	sbci	r31, 0xFF	; 255
    1968:	60 81       	ld	r22, Z
    196a:	71 81       	ldd	r23, Z+1	; 0x01
    196c:	82 81       	ldd	r24, Z+2	; 0x02
    196e:	93 81       	ldd	r25, Z+3	; 0x03
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	3f ef       	ldi	r19, 0xFF	; 255
    1974:	4f e7       	ldi	r20, 0x7F	; 127
    1976:	57 e4       	ldi	r21, 0x47	; 71
    1978:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    197c:	18 16       	cp	r1, r24
    197e:	0c f0       	brlt	.+2      	; 0x1982 <LCD_sendCommand+0xbe>
    1980:	43 c0       	rjmp	.+134    	; 0x1a08 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1982:	fe 01       	movw	r30, r28
    1984:	e7 5b       	subi	r30, 0xB7	; 183
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	60 81       	ld	r22, Z
    198a:	71 81       	ldd	r23, Z+1	; 0x01
    198c:	82 81       	ldd	r24, Z+2	; 0x02
    198e:	93 81       	ldd	r25, Z+3	; 0x03
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	40 e2       	ldi	r20, 0x20	; 32
    1996:	51 e4       	ldi	r21, 0x41	; 65
    1998:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	8e 01       	movw	r16, r28
    19a2:	0d 5b       	subi	r16, 0xBD	; 189
    19a4:	1f 4f       	sbci	r17, 0xFF	; 255
    19a6:	bc 01       	movw	r22, r24
    19a8:	cd 01       	movw	r24, r26
    19aa:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	f8 01       	movw	r30, r16
    19b4:	91 83       	std	Z+1, r25	; 0x01
    19b6:	80 83       	st	Z, r24
    19b8:	1f c0       	rjmp	.+62     	; 0x19f8 <LCD_sendCommand+0x134>
    19ba:	fe 01       	movw	r30, r28
    19bc:	ef 5b       	subi	r30, 0xBF	; 191
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	89 e1       	ldi	r24, 0x19	; 25
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	91 83       	std	Z+1, r25	; 0x01
    19c6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19c8:	fe 01       	movw	r30, r28
    19ca:	ef 5b       	subi	r30, 0xBF	; 191
    19cc:	ff 4f       	sbci	r31, 0xFF	; 255
    19ce:	80 81       	ld	r24, Z
    19d0:	91 81       	ldd	r25, Z+1	; 0x01
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <LCD_sendCommand+0x10e>
    19d6:	fe 01       	movw	r30, r28
    19d8:	ef 5b       	subi	r30, 0xBF	; 191
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	91 83       	std	Z+1, r25	; 0x01
    19de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e0:	de 01       	movw	r26, r28
    19e2:	ad 5b       	subi	r26, 0xBD	; 189
    19e4:	bf 4f       	sbci	r27, 0xFF	; 255
    19e6:	fe 01       	movw	r30, r28
    19e8:	ed 5b       	subi	r30, 0xBD	; 189
    19ea:	ff 4f       	sbci	r31, 0xFF	; 255
    19ec:	80 81       	ld	r24, Z
    19ee:	91 81       	ldd	r25, Z+1	; 0x01
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	11 96       	adiw	r26, 0x01	; 1
    19f4:	9c 93       	st	X, r25
    19f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f8:	fe 01       	movw	r30, r28
    19fa:	ed 5b       	subi	r30, 0xBD	; 189
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	80 81       	ld	r24, Z
    1a00:	91 81       	ldd	r25, Z+1	; 0x01
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	d1 f6       	brne	.-76     	; 0x19ba <LCD_sendCommand+0xf6>
    1a06:	24 c0       	rjmp	.+72     	; 0x1a50 <LCD_sendCommand+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a08:	8e 01       	movw	r16, r28
    1a0a:	0d 5b       	subi	r16, 0xBD	; 189
    1a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0e:	fe 01       	movw	r30, r28
    1a10:	eb 5b       	subi	r30, 0xBB	; 187
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	60 81       	ld	r22, Z
    1a16:	71 81       	ldd	r23, Z+1	; 0x01
    1a18:	82 81       	ldd	r24, Z+2	; 0x02
    1a1a:	93 81       	ldd	r25, Z+3	; 0x03
    1a1c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	f8 01       	movw	r30, r16
    1a26:	91 83       	std	Z+1, r25	; 0x01
    1a28:	80 83       	st	Z, r24
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	ed 5b       	subi	r30, 0xBD	; 189
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	80 81       	ld	r24, Z
    1a32:	91 81       	ldd	r25, Z+1	; 0x01
    1a34:	fe 01       	movw	r30, r28
    1a36:	ff 96       	adiw	r30, 0x3f	; 63
    1a38:	91 83       	std	Z+1, r25	; 0x01
    1a3a:	80 83       	st	Z, r24
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	ff 96       	adiw	r30, 0x3f	; 63
    1a40:	80 81       	ld	r24, Z
    1a42:	91 81       	ldd	r25, Z+1	; 0x01
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	f1 f7       	brne	.-4      	; 0x1a44 <LCD_sendCommand+0x180>
    1a48:	fe 01       	movw	r30, r28
    1a4a:	ff 96       	adiw	r30, 0x3f	; 63
    1a4c:	91 83       	std	Z+1, r25	; 0x01
    1a4e:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT,LCD_ENABLE,1);
    1a50:	83 e0       	ldi	r24, 0x03	; 3
    1a52:	62 e0       	ldi	r22, 0x02	; 2
    1a54:	41 e0       	ldi	r20, 0x01	; 1
    1a56:	0e 94 8b 09 	call	0x1316	; 0x1316 <GPIO_writePin>
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	a0 e8       	ldi	r26, 0x80	; 128
    1a60:	bf e3       	ldi	r27, 0x3F	; 63
    1a62:	8b af       	std	Y+59, r24	; 0x3b
    1a64:	9c af       	std	Y+60, r25	; 0x3c
    1a66:	ad af       	std	Y+61, r26	; 0x3d
    1a68:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a6a:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a6c:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a70:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	4a e7       	ldi	r20, 0x7A	; 122
    1a78:	53 e4       	ldi	r21, 0x43	; 67
    1a7a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	8f ab       	std	Y+55, r24	; 0x37
    1a84:	98 af       	std	Y+56, r25	; 0x38
    1a86:	a9 af       	std	Y+57, r26	; 0x39
    1a88:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1a8a:	6f a9       	ldd	r22, Y+55	; 0x37
    1a8c:	78 ad       	ldd	r23, Y+56	; 0x38
    1a8e:	89 ad       	ldd	r24, Y+57	; 0x39
    1a90:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	40 e8       	ldi	r20, 0x80	; 128
    1a98:	5f e3       	ldi	r21, 0x3F	; 63
    1a9a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1a9e:	88 23       	and	r24, r24
    1aa0:	2c f4       	brge	.+10     	; 0x1aac <LCD_sendCommand+0x1e8>
		__ticks = 1;
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	9e ab       	std	Y+54, r25	; 0x36
    1aa8:	8d ab       	std	Y+53, r24	; 0x35
    1aaa:	3f c0       	rjmp	.+126    	; 0x1b2a <LCD_sendCommand+0x266>
	else if (__tmp > 65535)
    1aac:	6f a9       	ldd	r22, Y+55	; 0x37
    1aae:	78 ad       	ldd	r23, Y+56	; 0x38
    1ab0:	89 ad       	ldd	r24, Y+57	; 0x39
    1ab2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	3f ef       	ldi	r19, 0xFF	; 255
    1ab8:	4f e7       	ldi	r20, 0x7F	; 127
    1aba:	57 e4       	ldi	r21, 0x47	; 71
    1abc:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1ac0:	18 16       	cp	r1, r24
    1ac2:	4c f5       	brge	.+82     	; 0x1b16 <LCD_sendCommand+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac4:	6b ad       	ldd	r22, Y+59	; 0x3b
    1ac6:	7c ad       	ldd	r23, Y+60	; 0x3c
    1ac8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1aca:	9e ad       	ldd	r25, Y+62	; 0x3e
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e2       	ldi	r20, 0x20	; 32
    1ad2:	51 e4       	ldi	r21, 0x41	; 65
    1ad4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	bc 01       	movw	r22, r24
    1ade:	cd 01       	movw	r24, r26
    1ae0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	9e ab       	std	Y+54, r25	; 0x36
    1aea:	8d ab       	std	Y+53, r24	; 0x35
    1aec:	0f c0       	rjmp	.+30     	; 0x1b0c <LCD_sendCommand+0x248>
    1aee:	89 e1       	ldi	r24, 0x19	; 25
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	9c ab       	std	Y+52, r25	; 0x34
    1af4:	8b ab       	std	Y+51, r24	; 0x33
    1af6:	8b a9       	ldd	r24, Y+51	; 0x33
    1af8:	9c a9       	ldd	r25, Y+52	; 0x34
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <LCD_sendCommand+0x236>
    1afe:	9c ab       	std	Y+52, r25	; 0x34
    1b00:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b02:	8d a9       	ldd	r24, Y+53	; 0x35
    1b04:	9e a9       	ldd	r25, Y+54	; 0x36
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	9e ab       	std	Y+54, r25	; 0x36
    1b0a:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b0c:	8d a9       	ldd	r24, Y+53	; 0x35
    1b0e:	9e a9       	ldd	r25, Y+54	; 0x36
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	69 f7       	brne	.-38     	; 0x1aee <LCD_sendCommand+0x22a>
    1b14:	14 c0       	rjmp	.+40     	; 0x1b3e <LCD_sendCommand+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b16:	6f a9       	ldd	r22, Y+55	; 0x37
    1b18:	78 ad       	ldd	r23, Y+56	; 0x38
    1b1a:	89 ad       	ldd	r24, Y+57	; 0x39
    1b1c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b1e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	9e ab       	std	Y+54, r25	; 0x36
    1b28:	8d ab       	std	Y+53, r24	; 0x35
    1b2a:	8d a9       	ldd	r24, Y+53	; 0x35
    1b2c:	9e a9       	ldd	r25, Y+54	; 0x36
    1b2e:	9a ab       	std	Y+50, r25	; 0x32
    1b30:	89 ab       	std	Y+49, r24	; 0x31
    1b32:	89 a9       	ldd	r24, Y+49	; 0x31
    1b34:	9a a9       	ldd	r25, Y+50	; 0x32
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <LCD_sendCommand+0x272>
    1b3a:	9a ab       	std	Y+50, r25	; 0x32
    1b3c:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(1);
#if(LCD_BIT_MODE==8)

	GPIO_writePort(LCD_DATA_PORT,command);
    1b3e:	fe 01       	movw	r30, r28
    1b40:	e3 5b       	subi	r30, 0xB3	; 179
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	82 e0       	ldi	r24, 0x02	; 2
    1b46:	60 81       	ld	r22, Z
    1b48:	0e 94 55 0b 	call	0x16aa	; 0x16aa <GPIO_writePort>
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	a0 e8       	ldi	r26, 0x80	; 128
    1b52:	bf e3       	ldi	r27, 0x3F	; 63
    1b54:	8d a7       	std	Y+45, r24	; 0x2d
    1b56:	9e a7       	std	Y+46, r25	; 0x2e
    1b58:	af a7       	std	Y+47, r26	; 0x2f
    1b5a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b5c:	6d a5       	ldd	r22, Y+45	; 0x2d
    1b5e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1b60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b62:	98 a9       	ldd	r25, Y+48	; 0x30
    1b64:	2b ea       	ldi	r18, 0xAB	; 171
    1b66:	3a ea       	ldi	r19, 0xAA	; 170
    1b68:	4a ea       	ldi	r20, 0xAA	; 170
    1b6a:	5e e3       	ldi	r21, 0x3E	; 62
    1b6c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	89 a7       	std	Y+41, r24	; 0x29
    1b76:	9a a7       	std	Y+42, r25	; 0x2a
    1b78:	ab a7       	std	Y+43, r26	; 0x2b
    1b7a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1b7c:	69 a5       	ldd	r22, Y+41	; 0x29
    1b7e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b80:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b82:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	40 e8       	ldi	r20, 0x80	; 128
    1b8a:	5f e3       	ldi	r21, 0x3F	; 63
    1b8c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1b90:	88 23       	and	r24, r24
    1b92:	1c f4       	brge	.+6      	; 0x1b9a <LCD_sendCommand+0x2d6>
		__ticks = 1;
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	88 a7       	std	Y+40, r24	; 0x28
    1b98:	91 c0       	rjmp	.+290    	; 0x1cbc <LCD_sendCommand+0x3f8>
	else if (__tmp > 255)
    1b9a:	69 a5       	ldd	r22, Y+41	; 0x29
    1b9c:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ba0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	4f e7       	ldi	r20, 0x7F	; 127
    1ba8:	53 e4       	ldi	r21, 0x43	; 67
    1baa:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1bae:	18 16       	cp	r1, r24
    1bb0:	0c f0       	brlt	.+2      	; 0x1bb4 <LCD_sendCommand+0x2f0>
    1bb2:	7b c0       	rjmp	.+246    	; 0x1caa <LCD_sendCommand+0x3e6>
	{
		_delay_ms(__us / 1000.0);
    1bb4:	6d a5       	ldd	r22, Y+45	; 0x2d
    1bb6:	7e a5       	ldd	r23, Y+46	; 0x2e
    1bb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bba:	98 a9       	ldd	r25, Y+48	; 0x30
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	4a e7       	ldi	r20, 0x7A	; 122
    1bc2:	54 e4       	ldi	r21, 0x44	; 68
    1bc4:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	8c a3       	std	Y+36, r24	; 0x24
    1bce:	9d a3       	std	Y+37, r25	; 0x25
    1bd0:	ae a3       	std	Y+38, r26	; 0x26
    1bd2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd4:	6c a1       	ldd	r22, Y+36	; 0x24
    1bd6:	7d a1       	ldd	r23, Y+37	; 0x25
    1bd8:	8e a1       	ldd	r24, Y+38	; 0x26
    1bda:	9f a1       	ldd	r25, Y+39	; 0x27
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	4a e7       	ldi	r20, 0x7A	; 122
    1be2:	53 e4       	ldi	r21, 0x43	; 67
    1be4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	88 a3       	std	Y+32, r24	; 0x20
    1bee:	99 a3       	std	Y+33, r25	; 0x21
    1bf0:	aa a3       	std	Y+34, r26	; 0x22
    1bf2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1bf4:	68 a1       	ldd	r22, Y+32	; 0x20
    1bf6:	79 a1       	ldd	r23, Y+33	; 0x21
    1bf8:	8a a1       	ldd	r24, Y+34	; 0x22
    1bfa:	9b a1       	ldd	r25, Y+35	; 0x23
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e8       	ldi	r20, 0x80	; 128
    1c02:	5f e3       	ldi	r21, 0x3F	; 63
    1c04:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1c08:	88 23       	and	r24, r24
    1c0a:	2c f4       	brge	.+10     	; 0x1c16 <LCD_sendCommand+0x352>
		__ticks = 1;
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	9f 8f       	std	Y+31, r25	; 0x1f
    1c12:	8e 8f       	std	Y+30, r24	; 0x1e
    1c14:	3f c0       	rjmp	.+126    	; 0x1c94 <LCD_sendCommand+0x3d0>
	else if (__tmp > 65535)
    1c16:	68 a1       	ldd	r22, Y+32	; 0x20
    1c18:	79 a1       	ldd	r23, Y+33	; 0x21
    1c1a:	8a a1       	ldd	r24, Y+34	; 0x22
    1c1c:	9b a1       	ldd	r25, Y+35	; 0x23
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	3f ef       	ldi	r19, 0xFF	; 255
    1c22:	4f e7       	ldi	r20, 0x7F	; 127
    1c24:	57 e4       	ldi	r21, 0x47	; 71
    1c26:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1c2a:	18 16       	cp	r1, r24
    1c2c:	4c f5       	brge	.+82     	; 0x1c80 <LCD_sendCommand+0x3bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c2e:	6c a1       	ldd	r22, Y+36	; 0x24
    1c30:	7d a1       	ldd	r23, Y+37	; 0x25
    1c32:	8e a1       	ldd	r24, Y+38	; 0x26
    1c34:	9f a1       	ldd	r25, Y+39	; 0x27
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	40 e2       	ldi	r20, 0x20	; 32
    1c3c:	51 e4       	ldi	r21, 0x41	; 65
    1c3e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	bc 01       	movw	r22, r24
    1c48:	cd 01       	movw	r24, r26
    1c4a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	9f 8f       	std	Y+31, r25	; 0x1f
    1c54:	8e 8f       	std	Y+30, r24	; 0x1e
    1c56:	0f c0       	rjmp	.+30     	; 0x1c76 <LCD_sendCommand+0x3b2>
    1c58:	89 e1       	ldi	r24, 0x19	; 25
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	9d 8f       	std	Y+29, r25	; 0x1d
    1c5e:	8c 8f       	std	Y+28, r24	; 0x1c
    1c60:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c62:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c64:	01 97       	sbiw	r24, 0x01	; 1
    1c66:	f1 f7       	brne	.-4      	; 0x1c64 <LCD_sendCommand+0x3a0>
    1c68:	9d 8f       	std	Y+29, r25	; 0x1d
    1c6a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c6c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c6e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c70:	01 97       	sbiw	r24, 0x01	; 1
    1c72:	9f 8f       	std	Y+31, r25	; 0x1f
    1c74:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c76:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c78:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c7a:	00 97       	sbiw	r24, 0x00	; 0
    1c7c:	69 f7       	brne	.-38     	; 0x1c58 <LCD_sendCommand+0x394>
    1c7e:	24 c0       	rjmp	.+72     	; 0x1cc8 <LCD_sendCommand+0x404>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c80:	68 a1       	ldd	r22, Y+32	; 0x20
    1c82:	79 a1       	ldd	r23, Y+33	; 0x21
    1c84:	8a a1       	ldd	r24, Y+34	; 0x22
    1c86:	9b a1       	ldd	r25, Y+35	; 0x23
    1c88:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	9f 8f       	std	Y+31, r25	; 0x1f
    1c92:	8e 8f       	std	Y+30, r24	; 0x1e
    1c94:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c96:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c98:	9b 8f       	std	Y+27, r25	; 0x1b
    1c9a:	8a 8f       	std	Y+26, r24	; 0x1a
    1c9c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c9e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ca0:	01 97       	sbiw	r24, 0x01	; 1
    1ca2:	f1 f7       	brne	.-4      	; 0x1ca0 <LCD_sendCommand+0x3dc>
    1ca4:	9b 8f       	std	Y+27, r25	; 0x1b
    1ca6:	8a 8f       	std	Y+26, r24	; 0x1a
    1ca8:	0f c0       	rjmp	.+30     	; 0x1cc8 <LCD_sendCommand+0x404>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1caa:	69 a5       	ldd	r22, Y+41	; 0x29
    1cac:	7a a5       	ldd	r23, Y+42	; 0x2a
    1cae:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cb0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cb2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	88 a7       	std	Y+40, r24	; 0x28
    1cbc:	88 a5       	ldd	r24, Y+40	; 0x28
    1cbe:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cc0:	89 8d       	ldd	r24, Y+25	; 0x19
    1cc2:	8a 95       	dec	r24
    1cc4:	f1 f7       	brne	.-4      	; 0x1cc2 <LCD_sendCommand+0x3fe>
    1cc6:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	GPIO_writePin(LCD_RS_PORT,LCD_ENABLE,0);
    1cc8:	83 e0       	ldi	r24, 0x03	; 3
    1cca:	62 e0       	ldi	r22, 0x02	; 2
    1ccc:	40 e0       	ldi	r20, 0x00	; 0
    1cce:	0e 94 8b 09 	call	0x1316	; 0x1316 <GPIO_writePin>
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	a0 e8       	ldi	r26, 0x80	; 128
    1cd8:	bf e3       	ldi	r27, 0x3F	; 63
    1cda:	8d 8b       	std	Y+21, r24	; 0x15
    1cdc:	9e 8b       	std	Y+22, r25	; 0x16
    1cde:	af 8b       	std	Y+23, r26	; 0x17
    1ce0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ce2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cea:	2b ea       	ldi	r18, 0xAB	; 171
    1cec:	3a ea       	ldi	r19, 0xAA	; 170
    1cee:	4a ea       	ldi	r20, 0xAA	; 170
    1cf0:	5e e3       	ldi	r21, 0x3E	; 62
    1cf2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	89 8b       	std	Y+17, r24	; 0x11
    1cfc:	9a 8b       	std	Y+18, r25	; 0x12
    1cfe:	ab 8b       	std	Y+19, r26	; 0x13
    1d00:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1d02:	69 89       	ldd	r22, Y+17	; 0x11
    1d04:	7a 89       	ldd	r23, Y+18	; 0x12
    1d06:	8b 89       	ldd	r24, Y+19	; 0x13
    1d08:	9c 89       	ldd	r25, Y+20	; 0x14
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	40 e8       	ldi	r20, 0x80	; 128
    1d10:	5f e3       	ldi	r21, 0x3F	; 63
    1d12:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1d16:	88 23       	and	r24, r24
    1d18:	1c f4       	brge	.+6      	; 0x1d20 <LCD_sendCommand+0x45c>
		__ticks = 1;
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	88 8b       	std	Y+16, r24	; 0x10
    1d1e:	91 c0       	rjmp	.+290    	; 0x1e42 <LCD_sendCommand+0x57e>
	else if (__tmp > 255)
    1d20:	69 89       	ldd	r22, Y+17	; 0x11
    1d22:	7a 89       	ldd	r23, Y+18	; 0x12
    1d24:	8b 89       	ldd	r24, Y+19	; 0x13
    1d26:	9c 89       	ldd	r25, Y+20	; 0x14
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	4f e7       	ldi	r20, 0x7F	; 127
    1d2e:	53 e4       	ldi	r21, 0x43	; 67
    1d30:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1d34:	18 16       	cp	r1, r24
    1d36:	0c f0       	brlt	.+2      	; 0x1d3a <LCD_sendCommand+0x476>
    1d38:	7b c0       	rjmp	.+246    	; 0x1e30 <LCD_sendCommand+0x56c>
	{
		_delay_ms(__us / 1000.0);
    1d3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d40:	98 8d       	ldd	r25, Y+24	; 0x18
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	4a e7       	ldi	r20, 0x7A	; 122
    1d48:	54 e4       	ldi	r21, 0x44	; 68
    1d4a:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	8c 87       	std	Y+12, r24	; 0x0c
    1d54:	9d 87       	std	Y+13, r25	; 0x0d
    1d56:	ae 87       	std	Y+14, r26	; 0x0e
    1d58:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d5a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d5c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d5e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d60:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	4a e7       	ldi	r20, 0x7A	; 122
    1d68:	53 e4       	ldi	r21, 0x43	; 67
    1d6a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	88 87       	std	Y+8, r24	; 0x08
    1d74:	99 87       	std	Y+9, r25	; 0x09
    1d76:	aa 87       	std	Y+10, r26	; 0x0a
    1d78:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1d7a:	68 85       	ldd	r22, Y+8	; 0x08
    1d7c:	79 85       	ldd	r23, Y+9	; 0x09
    1d7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d80:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e8       	ldi	r20, 0x80	; 128
    1d88:	5f e3       	ldi	r21, 0x3F	; 63
    1d8a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1d8e:	88 23       	and	r24, r24
    1d90:	2c f4       	brge	.+10     	; 0x1d9c <LCD_sendCommand+0x4d8>
		__ticks = 1;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	9f 83       	std	Y+7, r25	; 0x07
    1d98:	8e 83       	std	Y+6, r24	; 0x06
    1d9a:	3f c0       	rjmp	.+126    	; 0x1e1a <LCD_sendCommand+0x556>
	else if (__tmp > 65535)
    1d9c:	68 85       	ldd	r22, Y+8	; 0x08
    1d9e:	79 85       	ldd	r23, Y+9	; 0x09
    1da0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1da2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	3f ef       	ldi	r19, 0xFF	; 255
    1da8:	4f e7       	ldi	r20, 0x7F	; 127
    1daa:	57 e4       	ldi	r21, 0x47	; 71
    1dac:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1db0:	18 16       	cp	r1, r24
    1db2:	4c f5       	brge	.+82     	; 0x1e06 <LCD_sendCommand+0x542>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1db6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1db8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dba:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	40 e2       	ldi	r20, 0x20	; 32
    1dc2:	51 e4       	ldi	r21, 0x41	; 65
    1dc4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	bc 01       	movw	r22, r24
    1dce:	cd 01       	movw	r24, r26
    1dd0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	9f 83       	std	Y+7, r25	; 0x07
    1dda:	8e 83       	std	Y+6, r24	; 0x06
    1ddc:	0f c0       	rjmp	.+30     	; 0x1dfc <LCD_sendCommand+0x538>
    1dde:	89 e1       	ldi	r24, 0x19	; 25
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	9d 83       	std	Y+5, r25	; 0x05
    1de4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1de6:	8c 81       	ldd	r24, Y+4	; 0x04
    1de8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	f1 f7       	brne	.-4      	; 0x1dea <LCD_sendCommand+0x526>
    1dee:	9d 83       	std	Y+5, r25	; 0x05
    1df0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df2:	8e 81       	ldd	r24, Y+6	; 0x06
    1df4:	9f 81       	ldd	r25, Y+7	; 0x07
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	9f 83       	std	Y+7, r25	; 0x07
    1dfa:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dfc:	8e 81       	ldd	r24, Y+6	; 0x06
    1dfe:	9f 81       	ldd	r25, Y+7	; 0x07
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	69 f7       	brne	.-38     	; 0x1dde <LCD_sendCommand+0x51a>
    1e04:	24 c0       	rjmp	.+72     	; 0x1e4e <LCD_sendCommand+0x58a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e06:	68 85       	ldd	r22, Y+8	; 0x08
    1e08:	79 85       	ldd	r23, Y+9	; 0x09
    1e0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e0c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e0e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	9f 83       	std	Y+7, r25	; 0x07
    1e18:	8e 83       	std	Y+6, r24	; 0x06
    1e1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e1e:	9b 83       	std	Y+3, r25	; 0x03
    1e20:	8a 83       	std	Y+2, r24	; 0x02
    1e22:	8a 81       	ldd	r24, Y+2	; 0x02
    1e24:	9b 81       	ldd	r25, Y+3	; 0x03
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <LCD_sendCommand+0x562>
    1e2a:	9b 83       	std	Y+3, r25	; 0x03
    1e2c:	8a 83       	std	Y+2, r24	; 0x02
    1e2e:	0f c0       	rjmp	.+30     	; 0x1e4e <LCD_sendCommand+0x58a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e30:	69 89       	ldd	r22, Y+17	; 0x11
    1e32:	7a 89       	ldd	r23, Y+18	; 0x12
    1e34:	8b 89       	ldd	r24, Y+19	; 0x13
    1e36:	9c 89       	ldd	r25, Y+20	; 0x14
    1e38:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	88 8b       	std	Y+16, r24	; 0x10
    1e42:	88 89       	ldd	r24, Y+16	; 0x10
    1e44:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	8a 95       	dec	r24
    1e4a:	f1 f7       	brne	.-4      	; 0x1e48 <LCD_sendCommand+0x584>
    1e4c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7,GET_BIT(command,3));
	_delay_ms(1);
	GPIO_writePin(LCD_RS_PORT,LCD_ENABLE,0);
	_delay_ms(1);
#endif
}
    1e4e:	c3 5b       	subi	r28, 0xB3	; 179
    1e50:	df 4f       	sbci	r29, 0xFF	; 255
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	cd bf       	out	0x3d, r28	; 61
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	1f 91       	pop	r17
    1e62:	0f 91       	pop	r16
    1e64:	08 95       	ret

00001e66 <LCD_displayChar>:
/*
 * To Write Character on lcd
 */
void LCD_displayChar(uint8 character){
    1e66:	0f 93       	push	r16
    1e68:	1f 93       	push	r17
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	cd 54       	subi	r28, 0x4D	; 77
    1e74:	d0 40       	sbci	r29, 0x00	; 0
    1e76:	0f b6       	in	r0, 0x3f	; 63
    1e78:	f8 94       	cli
    1e7a:	de bf       	out	0x3e, r29	; 62
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	cd bf       	out	0x3d, r28	; 61
    1e80:	fe 01       	movw	r30, r28
    1e82:	e3 5b       	subi	r30, 0xB3	; 179
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	80 83       	st	Z, r24
	GPIO_writePin(LCD_EN_PORT,LCD_RS,1);
    1e88:	83 e0       	ldi	r24, 0x03	; 3
    1e8a:	60 e0       	ldi	r22, 0x00	; 0
    1e8c:	41 e0       	ldi	r20, 0x01	; 1
    1e8e:	0e 94 8b 09 	call	0x1316	; 0x1316 <GPIO_writePin>
    1e92:	fe 01       	movw	r30, r28
    1e94:	e7 5b       	subi	r30, 0xB7	; 183
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	a0 e8       	ldi	r26, 0x80	; 128
    1e9e:	bf e3       	ldi	r27, 0x3F	; 63
    1ea0:	80 83       	st	Z, r24
    1ea2:	91 83       	std	Z+1, r25	; 0x01
    1ea4:	a2 83       	std	Z+2, r26	; 0x02
    1ea6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea8:	8e 01       	movw	r16, r28
    1eaa:	0b 5b       	subi	r16, 0xBB	; 187
    1eac:	1f 4f       	sbci	r17, 0xFF	; 255
    1eae:	fe 01       	movw	r30, r28
    1eb0:	e7 5b       	subi	r30, 0xB7	; 183
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	60 81       	ld	r22, Z
    1eb6:	71 81       	ldd	r23, Z+1	; 0x01
    1eb8:	82 81       	ldd	r24, Z+2	; 0x02
    1eba:	93 81       	ldd	r25, Z+3	; 0x03
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	4a e7       	ldi	r20, 0x7A	; 122
    1ec2:	53 e4       	ldi	r21, 0x43	; 67
    1ec4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	f8 01       	movw	r30, r16
    1ece:	80 83       	st	Z, r24
    1ed0:	91 83       	std	Z+1, r25	; 0x01
    1ed2:	a2 83       	std	Z+2, r26	; 0x02
    1ed4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	eb 5b       	subi	r30, 0xBB	; 187
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	60 81       	ld	r22, Z
    1ede:	71 81       	ldd	r23, Z+1	; 0x01
    1ee0:	82 81       	ldd	r24, Z+2	; 0x02
    1ee2:	93 81       	ldd	r25, Z+3	; 0x03
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e8       	ldi	r20, 0x80	; 128
    1eea:	5f e3       	ldi	r21, 0x3F	; 63
    1eec:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1ef0:	88 23       	and	r24, r24
    1ef2:	44 f4       	brge	.+16     	; 0x1f04 <LCD_displayChar+0x9e>
		__ticks = 1;
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	ed 5b       	subi	r30, 0xBD	; 189
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	91 83       	std	Z+1, r25	; 0x01
    1f00:	80 83       	st	Z, r24
    1f02:	64 c0       	rjmp	.+200    	; 0x1fcc <LCD_displayChar+0x166>
	else if (__tmp > 65535)
    1f04:	fe 01       	movw	r30, r28
    1f06:	eb 5b       	subi	r30, 0xBB	; 187
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	60 81       	ld	r22, Z
    1f0c:	71 81       	ldd	r23, Z+1	; 0x01
    1f0e:	82 81       	ldd	r24, Z+2	; 0x02
    1f10:	93 81       	ldd	r25, Z+3	; 0x03
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	3f ef       	ldi	r19, 0xFF	; 255
    1f16:	4f e7       	ldi	r20, 0x7F	; 127
    1f18:	57 e4       	ldi	r21, 0x47	; 71
    1f1a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1f1e:	18 16       	cp	r1, r24
    1f20:	0c f0       	brlt	.+2      	; 0x1f24 <LCD_displayChar+0xbe>
    1f22:	43 c0       	rjmp	.+134    	; 0x1faa <LCD_displayChar+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f24:	fe 01       	movw	r30, r28
    1f26:	e7 5b       	subi	r30, 0xB7	; 183
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	60 81       	ld	r22, Z
    1f2c:	71 81       	ldd	r23, Z+1	; 0x01
    1f2e:	82 81       	ldd	r24, Z+2	; 0x02
    1f30:	93 81       	ldd	r25, Z+3	; 0x03
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	40 e2       	ldi	r20, 0x20	; 32
    1f38:	51 e4       	ldi	r21, 0x41	; 65
    1f3a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	8e 01       	movw	r16, r28
    1f44:	0d 5b       	subi	r16, 0xBD	; 189
    1f46:	1f 4f       	sbci	r17, 0xFF	; 255
    1f48:	bc 01       	movw	r22, r24
    1f4a:	cd 01       	movw	r24, r26
    1f4c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	f8 01       	movw	r30, r16
    1f56:	91 83       	std	Z+1, r25	; 0x01
    1f58:	80 83       	st	Z, r24
    1f5a:	1f c0       	rjmp	.+62     	; 0x1f9a <LCD_displayChar+0x134>
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	ef 5b       	subi	r30, 0xBF	; 191
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	89 e1       	ldi	r24, 0x19	; 25
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	91 83       	std	Z+1, r25	; 0x01
    1f68:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	ef 5b       	subi	r30, 0xBF	; 191
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	80 81       	ld	r24, Z
    1f72:	91 81       	ldd	r25, Z+1	; 0x01
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <LCD_displayChar+0x10e>
    1f78:	fe 01       	movw	r30, r28
    1f7a:	ef 5b       	subi	r30, 0xBF	; 191
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	91 83       	std	Z+1, r25	; 0x01
    1f80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f82:	de 01       	movw	r26, r28
    1f84:	ad 5b       	subi	r26, 0xBD	; 189
    1f86:	bf 4f       	sbci	r27, 0xFF	; 255
    1f88:	fe 01       	movw	r30, r28
    1f8a:	ed 5b       	subi	r30, 0xBD	; 189
    1f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8e:	80 81       	ld	r24, Z
    1f90:	91 81       	ldd	r25, Z+1	; 0x01
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	11 96       	adiw	r26, 0x01	; 1
    1f96:	9c 93       	st	X, r25
    1f98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9a:	fe 01       	movw	r30, r28
    1f9c:	ed 5b       	subi	r30, 0xBD	; 189
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	80 81       	ld	r24, Z
    1fa2:	91 81       	ldd	r25, Z+1	; 0x01
    1fa4:	00 97       	sbiw	r24, 0x00	; 0
    1fa6:	d1 f6       	brne	.-76     	; 0x1f5c <LCD_displayChar+0xf6>
    1fa8:	24 c0       	rjmp	.+72     	; 0x1ff2 <LCD_displayChar+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1faa:	8e 01       	movw	r16, r28
    1fac:	0d 5b       	subi	r16, 0xBD	; 189
    1fae:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	eb 5b       	subi	r30, 0xBB	; 187
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	60 81       	ld	r22, Z
    1fb8:	71 81       	ldd	r23, Z+1	; 0x01
    1fba:	82 81       	ldd	r24, Z+2	; 0x02
    1fbc:	93 81       	ldd	r25, Z+3	; 0x03
    1fbe:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	f8 01       	movw	r30, r16
    1fc8:	91 83       	std	Z+1, r25	; 0x01
    1fca:	80 83       	st	Z, r24
    1fcc:	fe 01       	movw	r30, r28
    1fce:	ed 5b       	subi	r30, 0xBD	; 189
    1fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd2:	80 81       	ld	r24, Z
    1fd4:	91 81       	ldd	r25, Z+1	; 0x01
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	ff 96       	adiw	r30, 0x3f	; 63
    1fda:	91 83       	std	Z+1, r25	; 0x01
    1fdc:	80 83       	st	Z, r24
    1fde:	fe 01       	movw	r30, r28
    1fe0:	ff 96       	adiw	r30, 0x3f	; 63
    1fe2:	80 81       	ld	r24, Z
    1fe4:	91 81       	ldd	r25, Z+1	; 0x01
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	f1 f7       	brne	.-4      	; 0x1fe6 <LCD_displayChar+0x180>
    1fea:	fe 01       	movw	r30, r28
    1fec:	ff 96       	adiw	r30, 0x3f	; 63
    1fee:	91 83       	std	Z+1, r25	; 0x01
    1ff0:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT,LCD_ENABLE,1);
    1ff2:	83 e0       	ldi	r24, 0x03	; 3
    1ff4:	62 e0       	ldi	r22, 0x02	; 2
    1ff6:	41 e0       	ldi	r20, 0x01	; 1
    1ff8:	0e 94 8b 09 	call	0x1316	; 0x1316 <GPIO_writePin>
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	a0 e8       	ldi	r26, 0x80	; 128
    2002:	bf e3       	ldi	r27, 0x3F	; 63
    2004:	8b af       	std	Y+59, r24	; 0x3b
    2006:	9c af       	std	Y+60, r25	; 0x3c
    2008:	ad af       	std	Y+61, r26	; 0x3d
    200a:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200c:	6b ad       	ldd	r22, Y+59	; 0x3b
    200e:	7c ad       	ldd	r23, Y+60	; 0x3c
    2010:	8d ad       	ldd	r24, Y+61	; 0x3d
    2012:	9e ad       	ldd	r25, Y+62	; 0x3e
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	4a e7       	ldi	r20, 0x7A	; 122
    201a:	53 e4       	ldi	r21, 0x43	; 67
    201c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	8f ab       	std	Y+55, r24	; 0x37
    2026:	98 af       	std	Y+56, r25	; 0x38
    2028:	a9 af       	std	Y+57, r26	; 0x39
    202a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    202c:	6f a9       	ldd	r22, Y+55	; 0x37
    202e:	78 ad       	ldd	r23, Y+56	; 0x38
    2030:	89 ad       	ldd	r24, Y+57	; 0x39
    2032:	9a ad       	ldd	r25, Y+58	; 0x3a
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e8       	ldi	r20, 0x80	; 128
    203a:	5f e3       	ldi	r21, 0x3F	; 63
    203c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2040:	88 23       	and	r24, r24
    2042:	2c f4       	brge	.+10     	; 0x204e <LCD_displayChar+0x1e8>
		__ticks = 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9e ab       	std	Y+54, r25	; 0x36
    204a:	8d ab       	std	Y+53, r24	; 0x35
    204c:	3f c0       	rjmp	.+126    	; 0x20cc <LCD_displayChar+0x266>
	else if (__tmp > 65535)
    204e:	6f a9       	ldd	r22, Y+55	; 0x37
    2050:	78 ad       	ldd	r23, Y+56	; 0x38
    2052:	89 ad       	ldd	r24, Y+57	; 0x39
    2054:	9a ad       	ldd	r25, Y+58	; 0x3a
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	3f ef       	ldi	r19, 0xFF	; 255
    205a:	4f e7       	ldi	r20, 0x7F	; 127
    205c:	57 e4       	ldi	r21, 0x47	; 71
    205e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2062:	18 16       	cp	r1, r24
    2064:	4c f5       	brge	.+82     	; 0x20b8 <LCD_displayChar+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2066:	6b ad       	ldd	r22, Y+59	; 0x3b
    2068:	7c ad       	ldd	r23, Y+60	; 0x3c
    206a:	8d ad       	ldd	r24, Y+61	; 0x3d
    206c:	9e ad       	ldd	r25, Y+62	; 0x3e
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e2       	ldi	r20, 0x20	; 32
    2074:	51 e4       	ldi	r21, 0x41	; 65
    2076:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	bc 01       	movw	r22, r24
    2080:	cd 01       	movw	r24, r26
    2082:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	9e ab       	std	Y+54, r25	; 0x36
    208c:	8d ab       	std	Y+53, r24	; 0x35
    208e:	0f c0       	rjmp	.+30     	; 0x20ae <LCD_displayChar+0x248>
    2090:	89 e1       	ldi	r24, 0x19	; 25
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	9c ab       	std	Y+52, r25	; 0x34
    2096:	8b ab       	std	Y+51, r24	; 0x33
    2098:	8b a9       	ldd	r24, Y+51	; 0x33
    209a:	9c a9       	ldd	r25, Y+52	; 0x34
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <LCD_displayChar+0x236>
    20a0:	9c ab       	std	Y+52, r25	; 0x34
    20a2:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a4:	8d a9       	ldd	r24, Y+53	; 0x35
    20a6:	9e a9       	ldd	r25, Y+54	; 0x36
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	9e ab       	std	Y+54, r25	; 0x36
    20ac:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ae:	8d a9       	ldd	r24, Y+53	; 0x35
    20b0:	9e a9       	ldd	r25, Y+54	; 0x36
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	69 f7       	brne	.-38     	; 0x2090 <LCD_displayChar+0x22a>
    20b6:	14 c0       	rjmp	.+40     	; 0x20e0 <LCD_displayChar+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b8:	6f a9       	ldd	r22, Y+55	; 0x37
    20ba:	78 ad       	ldd	r23, Y+56	; 0x38
    20bc:	89 ad       	ldd	r24, Y+57	; 0x39
    20be:	9a ad       	ldd	r25, Y+58	; 0x3a
    20c0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	9e ab       	std	Y+54, r25	; 0x36
    20ca:	8d ab       	std	Y+53, r24	; 0x35
    20cc:	8d a9       	ldd	r24, Y+53	; 0x35
    20ce:	9e a9       	ldd	r25, Y+54	; 0x36
    20d0:	9a ab       	std	Y+50, r25	; 0x32
    20d2:	89 ab       	std	Y+49, r24	; 0x31
    20d4:	89 a9       	ldd	r24, Y+49	; 0x31
    20d6:	9a a9       	ldd	r25, Y+50	; 0x32
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	f1 f7       	brne	.-4      	; 0x20d8 <LCD_displayChar+0x272>
    20dc:	9a ab       	std	Y+50, r25	; 0x32
    20de:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(1);
#if(LCD_BIT_MODE==8)
	GPIO_writePort(LCD_DATA_PORT,character);
    20e0:	fe 01       	movw	r30, r28
    20e2:	e3 5b       	subi	r30, 0xB3	; 179
    20e4:	ff 4f       	sbci	r31, 0xFF	; 255
    20e6:	82 e0       	ldi	r24, 0x02	; 2
    20e8:	60 81       	ld	r22, Z
    20ea:	0e 94 55 0b 	call	0x16aa	; 0x16aa <GPIO_writePort>
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	a0 e8       	ldi	r26, 0x80	; 128
    20f4:	bf e3       	ldi	r27, 0x3F	; 63
    20f6:	8d a7       	std	Y+45, r24	; 0x2d
    20f8:	9e a7       	std	Y+46, r25	; 0x2e
    20fa:	af a7       	std	Y+47, r26	; 0x2f
    20fc:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20fe:	6d a5       	ldd	r22, Y+45	; 0x2d
    2100:	7e a5       	ldd	r23, Y+46	; 0x2e
    2102:	8f a5       	ldd	r24, Y+47	; 0x2f
    2104:	98 a9       	ldd	r25, Y+48	; 0x30
    2106:	2b ea       	ldi	r18, 0xAB	; 171
    2108:	3a ea       	ldi	r19, 0xAA	; 170
    210a:	4a ea       	ldi	r20, 0xAA	; 170
    210c:	5e e3       	ldi	r21, 0x3E	; 62
    210e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	89 a7       	std	Y+41, r24	; 0x29
    2118:	9a a7       	std	Y+42, r25	; 0x2a
    211a:	ab a7       	std	Y+43, r26	; 0x2b
    211c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    211e:	69 a5       	ldd	r22, Y+41	; 0x29
    2120:	7a a5       	ldd	r23, Y+42	; 0x2a
    2122:	8b a5       	ldd	r24, Y+43	; 0x2b
    2124:	9c a5       	ldd	r25, Y+44	; 0x2c
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e8       	ldi	r20, 0x80	; 128
    212c:	5f e3       	ldi	r21, 0x3F	; 63
    212e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2132:	88 23       	and	r24, r24
    2134:	1c f4       	brge	.+6      	; 0x213c <LCD_displayChar+0x2d6>
		__ticks = 1;
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	88 a7       	std	Y+40, r24	; 0x28
    213a:	91 c0       	rjmp	.+290    	; 0x225e <LCD_displayChar+0x3f8>
	else if (__tmp > 255)
    213c:	69 a5       	ldd	r22, Y+41	; 0x29
    213e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2140:	8b a5       	ldd	r24, Y+43	; 0x2b
    2142:	9c a5       	ldd	r25, Y+44	; 0x2c
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	4f e7       	ldi	r20, 0x7F	; 127
    214a:	53 e4       	ldi	r21, 0x43	; 67
    214c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2150:	18 16       	cp	r1, r24
    2152:	0c f0       	brlt	.+2      	; 0x2156 <LCD_displayChar+0x2f0>
    2154:	7b c0       	rjmp	.+246    	; 0x224c <LCD_displayChar+0x3e6>
	{
		_delay_ms(__us / 1000.0);
    2156:	6d a5       	ldd	r22, Y+45	; 0x2d
    2158:	7e a5       	ldd	r23, Y+46	; 0x2e
    215a:	8f a5       	ldd	r24, Y+47	; 0x2f
    215c:	98 a9       	ldd	r25, Y+48	; 0x30
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	4a e7       	ldi	r20, 0x7A	; 122
    2164:	54 e4       	ldi	r21, 0x44	; 68
    2166:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	8c a3       	std	Y+36, r24	; 0x24
    2170:	9d a3       	std	Y+37, r25	; 0x25
    2172:	ae a3       	std	Y+38, r26	; 0x26
    2174:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2176:	6c a1       	ldd	r22, Y+36	; 0x24
    2178:	7d a1       	ldd	r23, Y+37	; 0x25
    217a:	8e a1       	ldd	r24, Y+38	; 0x26
    217c:	9f a1       	ldd	r25, Y+39	; 0x27
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	4a e7       	ldi	r20, 0x7A	; 122
    2184:	53 e4       	ldi	r21, 0x43	; 67
    2186:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	88 a3       	std	Y+32, r24	; 0x20
    2190:	99 a3       	std	Y+33, r25	; 0x21
    2192:	aa a3       	std	Y+34, r26	; 0x22
    2194:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2196:	68 a1       	ldd	r22, Y+32	; 0x20
    2198:	79 a1       	ldd	r23, Y+33	; 0x21
    219a:	8a a1       	ldd	r24, Y+34	; 0x22
    219c:	9b a1       	ldd	r25, Y+35	; 0x23
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	40 e8       	ldi	r20, 0x80	; 128
    21a4:	5f e3       	ldi	r21, 0x3F	; 63
    21a6:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    21aa:	88 23       	and	r24, r24
    21ac:	2c f4       	brge	.+10     	; 0x21b8 <LCD_displayChar+0x352>
		__ticks = 1;
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	9f 8f       	std	Y+31, r25	; 0x1f
    21b4:	8e 8f       	std	Y+30, r24	; 0x1e
    21b6:	3f c0       	rjmp	.+126    	; 0x2236 <LCD_displayChar+0x3d0>
	else if (__tmp > 65535)
    21b8:	68 a1       	ldd	r22, Y+32	; 0x20
    21ba:	79 a1       	ldd	r23, Y+33	; 0x21
    21bc:	8a a1       	ldd	r24, Y+34	; 0x22
    21be:	9b a1       	ldd	r25, Y+35	; 0x23
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	3f ef       	ldi	r19, 0xFF	; 255
    21c4:	4f e7       	ldi	r20, 0x7F	; 127
    21c6:	57 e4       	ldi	r21, 0x47	; 71
    21c8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    21cc:	18 16       	cp	r1, r24
    21ce:	4c f5       	brge	.+82     	; 0x2222 <LCD_displayChar+0x3bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d0:	6c a1       	ldd	r22, Y+36	; 0x24
    21d2:	7d a1       	ldd	r23, Y+37	; 0x25
    21d4:	8e a1       	ldd	r24, Y+38	; 0x26
    21d6:	9f a1       	ldd	r25, Y+39	; 0x27
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e2       	ldi	r20, 0x20	; 32
    21de:	51 e4       	ldi	r21, 0x41	; 65
    21e0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	bc 01       	movw	r22, r24
    21ea:	cd 01       	movw	r24, r26
    21ec:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	9f 8f       	std	Y+31, r25	; 0x1f
    21f6:	8e 8f       	std	Y+30, r24	; 0x1e
    21f8:	0f c0       	rjmp	.+30     	; 0x2218 <LCD_displayChar+0x3b2>
    21fa:	89 e1       	ldi	r24, 0x19	; 25
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	9d 8f       	std	Y+29, r25	; 0x1d
    2200:	8c 8f       	std	Y+28, r24	; 0x1c
    2202:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2204:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <LCD_displayChar+0x3a0>
    220a:	9d 8f       	std	Y+29, r25	; 0x1d
    220c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2210:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	9f 8f       	std	Y+31, r25	; 0x1f
    2216:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2218:	8e 8d       	ldd	r24, Y+30	; 0x1e
    221a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    221c:	00 97       	sbiw	r24, 0x00	; 0
    221e:	69 f7       	brne	.-38     	; 0x21fa <LCD_displayChar+0x394>
    2220:	24 c0       	rjmp	.+72     	; 0x226a <LCD_displayChar+0x404>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2222:	68 a1       	ldd	r22, Y+32	; 0x20
    2224:	79 a1       	ldd	r23, Y+33	; 0x21
    2226:	8a a1       	ldd	r24, Y+34	; 0x22
    2228:	9b a1       	ldd	r25, Y+35	; 0x23
    222a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	9f 8f       	std	Y+31, r25	; 0x1f
    2234:	8e 8f       	std	Y+30, r24	; 0x1e
    2236:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2238:	9f 8d       	ldd	r25, Y+31	; 0x1f
    223a:	9b 8f       	std	Y+27, r25	; 0x1b
    223c:	8a 8f       	std	Y+26, r24	; 0x1a
    223e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2240:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <LCD_displayChar+0x3dc>
    2246:	9b 8f       	std	Y+27, r25	; 0x1b
    2248:	8a 8f       	std	Y+26, r24	; 0x1a
    224a:	0f c0       	rjmp	.+30     	; 0x226a <LCD_displayChar+0x404>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    224c:	69 a5       	ldd	r22, Y+41	; 0x29
    224e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2250:	8b a5       	ldd	r24, Y+43	; 0x2b
    2252:	9c a5       	ldd	r25, Y+44	; 0x2c
    2254:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	88 a7       	std	Y+40, r24	; 0x28
    225e:	88 a5       	ldd	r24, Y+40	; 0x28
    2260:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2262:	89 8d       	ldd	r24, Y+25	; 0x19
    2264:	8a 95       	dec	r24
    2266:	f1 f7       	brne	.-4      	; 0x2264 <LCD_displayChar+0x3fe>
    2268:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	GPIO_writePin(LCD_EN_PORT,LCD_ENABLE,0);
    226a:	83 e0       	ldi	r24, 0x03	; 3
    226c:	62 e0       	ldi	r22, 0x02	; 2
    226e:	40 e0       	ldi	r20, 0x00	; 0
    2270:	0e 94 8b 09 	call	0x1316	; 0x1316 <GPIO_writePin>
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	a0 e8       	ldi	r26, 0x80	; 128
    227a:	bf e3       	ldi	r27, 0x3F	; 63
    227c:	8d 8b       	std	Y+21, r24	; 0x15
    227e:	9e 8b       	std	Y+22, r25	; 0x16
    2280:	af 8b       	std	Y+23, r26	; 0x17
    2282:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2284:	6d 89       	ldd	r22, Y+21	; 0x15
    2286:	7e 89       	ldd	r23, Y+22	; 0x16
    2288:	8f 89       	ldd	r24, Y+23	; 0x17
    228a:	98 8d       	ldd	r25, Y+24	; 0x18
    228c:	2b ea       	ldi	r18, 0xAB	; 171
    228e:	3a ea       	ldi	r19, 0xAA	; 170
    2290:	4a ea       	ldi	r20, 0xAA	; 170
    2292:	5e e3       	ldi	r21, 0x3E	; 62
    2294:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	89 8b       	std	Y+17, r24	; 0x11
    229e:	9a 8b       	std	Y+18, r25	; 0x12
    22a0:	ab 8b       	std	Y+19, r26	; 0x13
    22a2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    22a4:	69 89       	ldd	r22, Y+17	; 0x11
    22a6:	7a 89       	ldd	r23, Y+18	; 0x12
    22a8:	8b 89       	ldd	r24, Y+19	; 0x13
    22aa:	9c 89       	ldd	r25, Y+20	; 0x14
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e8       	ldi	r20, 0x80	; 128
    22b2:	5f e3       	ldi	r21, 0x3F	; 63
    22b4:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    22b8:	88 23       	and	r24, r24
    22ba:	1c f4       	brge	.+6      	; 0x22c2 <LCD_displayChar+0x45c>
		__ticks = 1;
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	88 8b       	std	Y+16, r24	; 0x10
    22c0:	91 c0       	rjmp	.+290    	; 0x23e4 <LCD_displayChar+0x57e>
	else if (__tmp > 255)
    22c2:	69 89       	ldd	r22, Y+17	; 0x11
    22c4:	7a 89       	ldd	r23, Y+18	; 0x12
    22c6:	8b 89       	ldd	r24, Y+19	; 0x13
    22c8:	9c 89       	ldd	r25, Y+20	; 0x14
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	4f e7       	ldi	r20, 0x7F	; 127
    22d0:	53 e4       	ldi	r21, 0x43	; 67
    22d2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    22d6:	18 16       	cp	r1, r24
    22d8:	0c f0       	brlt	.+2      	; 0x22dc <LCD_displayChar+0x476>
    22da:	7b c0       	rjmp	.+246    	; 0x23d2 <LCD_displayChar+0x56c>
	{
		_delay_ms(__us / 1000.0);
    22dc:	6d 89       	ldd	r22, Y+21	; 0x15
    22de:	7e 89       	ldd	r23, Y+22	; 0x16
    22e0:	8f 89       	ldd	r24, Y+23	; 0x17
    22e2:	98 8d       	ldd	r25, Y+24	; 0x18
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	4a e7       	ldi	r20, 0x7A	; 122
    22ea:	54 e4       	ldi	r21, 0x44	; 68
    22ec:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	8c 87       	std	Y+12, r24	; 0x0c
    22f6:	9d 87       	std	Y+13, r25	; 0x0d
    22f8:	ae 87       	std	Y+14, r26	; 0x0e
    22fa:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22fc:	6c 85       	ldd	r22, Y+12	; 0x0c
    22fe:	7d 85       	ldd	r23, Y+13	; 0x0d
    2300:	8e 85       	ldd	r24, Y+14	; 0x0e
    2302:	9f 85       	ldd	r25, Y+15	; 0x0f
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	4a e7       	ldi	r20, 0x7A	; 122
    230a:	53 e4       	ldi	r21, 0x43	; 67
    230c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	88 87       	std	Y+8, r24	; 0x08
    2316:	99 87       	std	Y+9, r25	; 0x09
    2318:	aa 87       	std	Y+10, r26	; 0x0a
    231a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    231c:	68 85       	ldd	r22, Y+8	; 0x08
    231e:	79 85       	ldd	r23, Y+9	; 0x09
    2320:	8a 85       	ldd	r24, Y+10	; 0x0a
    2322:	9b 85       	ldd	r25, Y+11	; 0x0b
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	40 e8       	ldi	r20, 0x80	; 128
    232a:	5f e3       	ldi	r21, 0x3F	; 63
    232c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2330:	88 23       	and	r24, r24
    2332:	2c f4       	brge	.+10     	; 0x233e <LCD_displayChar+0x4d8>
		__ticks = 1;
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	9f 83       	std	Y+7, r25	; 0x07
    233a:	8e 83       	std	Y+6, r24	; 0x06
    233c:	3f c0       	rjmp	.+126    	; 0x23bc <LCD_displayChar+0x556>
	else if (__tmp > 65535)
    233e:	68 85       	ldd	r22, Y+8	; 0x08
    2340:	79 85       	ldd	r23, Y+9	; 0x09
    2342:	8a 85       	ldd	r24, Y+10	; 0x0a
    2344:	9b 85       	ldd	r25, Y+11	; 0x0b
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	3f ef       	ldi	r19, 0xFF	; 255
    234a:	4f e7       	ldi	r20, 0x7F	; 127
    234c:	57 e4       	ldi	r21, 0x47	; 71
    234e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2352:	18 16       	cp	r1, r24
    2354:	4c f5       	brge	.+82     	; 0x23a8 <LCD_displayChar+0x542>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2356:	6c 85       	ldd	r22, Y+12	; 0x0c
    2358:	7d 85       	ldd	r23, Y+13	; 0x0d
    235a:	8e 85       	ldd	r24, Y+14	; 0x0e
    235c:	9f 85       	ldd	r25, Y+15	; 0x0f
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	40 e2       	ldi	r20, 0x20	; 32
    2364:	51 e4       	ldi	r21, 0x41	; 65
    2366:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	bc 01       	movw	r22, r24
    2370:	cd 01       	movw	r24, r26
    2372:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	9f 83       	std	Y+7, r25	; 0x07
    237c:	8e 83       	std	Y+6, r24	; 0x06
    237e:	0f c0       	rjmp	.+30     	; 0x239e <LCD_displayChar+0x538>
    2380:	89 e1       	ldi	r24, 0x19	; 25
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	9d 83       	std	Y+5, r25	; 0x05
    2386:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2388:	8c 81       	ldd	r24, Y+4	; 0x04
    238a:	9d 81       	ldd	r25, Y+5	; 0x05
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <LCD_displayChar+0x526>
    2390:	9d 83       	std	Y+5, r25	; 0x05
    2392:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2394:	8e 81       	ldd	r24, Y+6	; 0x06
    2396:	9f 81       	ldd	r25, Y+7	; 0x07
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	9f 83       	std	Y+7, r25	; 0x07
    239c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239e:	8e 81       	ldd	r24, Y+6	; 0x06
    23a0:	9f 81       	ldd	r25, Y+7	; 0x07
    23a2:	00 97       	sbiw	r24, 0x00	; 0
    23a4:	69 f7       	brne	.-38     	; 0x2380 <LCD_displayChar+0x51a>
    23a6:	24 c0       	rjmp	.+72     	; 0x23f0 <LCD_displayChar+0x58a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a8:	68 85       	ldd	r22, Y+8	; 0x08
    23aa:	79 85       	ldd	r23, Y+9	; 0x09
    23ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    23ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    23b0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	9f 83       	std	Y+7, r25	; 0x07
    23ba:	8e 83       	std	Y+6, r24	; 0x06
    23bc:	8e 81       	ldd	r24, Y+6	; 0x06
    23be:	9f 81       	ldd	r25, Y+7	; 0x07
    23c0:	9b 83       	std	Y+3, r25	; 0x03
    23c2:	8a 83       	std	Y+2, r24	; 0x02
    23c4:	8a 81       	ldd	r24, Y+2	; 0x02
    23c6:	9b 81       	ldd	r25, Y+3	; 0x03
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <LCD_displayChar+0x562>
    23cc:	9b 83       	std	Y+3, r25	; 0x03
    23ce:	8a 83       	std	Y+2, r24	; 0x02
    23d0:	0f c0       	rjmp	.+30     	; 0x23f0 <LCD_displayChar+0x58a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23d2:	69 89       	ldd	r22, Y+17	; 0x11
    23d4:	7a 89       	ldd	r23, Y+18	; 0x12
    23d6:	8b 89       	ldd	r24, Y+19	; 0x13
    23d8:	9c 89       	ldd	r25, Y+20	; 0x14
    23da:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	88 8b       	std	Y+16, r24	; 0x10
    23e4:	88 89       	ldd	r24, Y+16	; 0x10
    23e6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	8a 95       	dec	r24
    23ec:	f1 f7       	brne	.-4      	; 0x23ea <LCD_displayChar+0x584>
    23ee:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7,GET_BIT(character,3));
	_delay_ms(1);
	GPIO_writePin(LCD_RS_PORT,LCD_ENABLE,0);
	_delay_ms(1);
#endif
}
    23f0:	c3 5b       	subi	r28, 0xB3	; 179
    23f2:	df 4f       	sbci	r29, 0xFF	; 255
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	f8 94       	cli
    23f8:	de bf       	out	0x3e, r29	; 62
    23fa:	0f be       	out	0x3f, r0	; 63
    23fc:	cd bf       	out	0x3d, r28	; 61
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	1f 91       	pop	r17
    2404:	0f 91       	pop	r16
    2406:	08 95       	ret

00002408 <LCD_init>:
/*
 * TO initialize lcd
 */
void LCD_init(void){
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
    2410:	2e 97       	sbiw	r28, 0x0e	; 14
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	f8 94       	cli
    2416:	de bf       	out	0x3e, r29	; 62
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT,LCD_RS,PIN_OUTPUT);
    241c:	83 e0       	ldi	r24, 0x03	; 3
    241e:	60 e0       	ldi	r22, 0x00	; 0
    2420:	41 e0       	ldi	r20, 0x01	; 1
    2422:	0e 94 a0 08 	call	0x1140	; 0x1140 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_EN_PORT,LCD_ENABLE,PIN_OUTPUT);
    2426:	83 e0       	ldi	r24, 0x03	; 3
    2428:	62 e0       	ldi	r22, 0x02	; 2
    242a:	41 e0       	ldi	r20, 0x01	; 1
    242c:	0e 94 a0 08 	call	0x1140	; 0x1140 <GPIO_setupPinDirection>
#if(LCD_BIT_MODE==8)
	GPIO_setupPortDirection(LCD_DATA_PORT,PORT_OUTPUT);
    2430:	82 e0       	ldi	r24, 0x02	; 2
    2432:	6f ef       	ldi	r22, 0xFF	; 255
    2434:	0e 94 11 0b 	call	0x1622	; 0x1622 <GPIO_setupPortDirection>
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	a0 ea       	ldi	r26, 0xA0	; 160
    243e:	b1 e4       	ldi	r27, 0x41	; 65
    2440:	8b 87       	std	Y+11, r24	; 0x0b
    2442:	9c 87       	std	Y+12, r25	; 0x0c
    2444:	ad 87       	std	Y+13, r26	; 0x0d
    2446:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2448:	6b 85       	ldd	r22, Y+11	; 0x0b
    244a:	7c 85       	ldd	r23, Y+12	; 0x0c
    244c:	8d 85       	ldd	r24, Y+13	; 0x0d
    244e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	4a e7       	ldi	r20, 0x7A	; 122
    2456:	53 e4       	ldi	r21, 0x43	; 67
    2458:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	8f 83       	std	Y+7, r24	; 0x07
    2462:	98 87       	std	Y+8, r25	; 0x08
    2464:	a9 87       	std	Y+9, r26	; 0x09
    2466:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2468:	6f 81       	ldd	r22, Y+7	; 0x07
    246a:	78 85       	ldd	r23, Y+8	; 0x08
    246c:	89 85       	ldd	r24, Y+9	; 0x09
    246e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e8       	ldi	r20, 0x80	; 128
    2476:	5f e3       	ldi	r21, 0x3F	; 63
    2478:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    247c:	88 23       	and	r24, r24
    247e:	2c f4       	brge	.+10     	; 0x248a <LCD_init+0x82>
		__ticks = 1;
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	9e 83       	std	Y+6, r25	; 0x06
    2486:	8d 83       	std	Y+5, r24	; 0x05
    2488:	3f c0       	rjmp	.+126    	; 0x2508 <LCD_init+0x100>
	else if (__tmp > 65535)
    248a:	6f 81       	ldd	r22, Y+7	; 0x07
    248c:	78 85       	ldd	r23, Y+8	; 0x08
    248e:	89 85       	ldd	r24, Y+9	; 0x09
    2490:	9a 85       	ldd	r25, Y+10	; 0x0a
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	3f ef       	ldi	r19, 0xFF	; 255
    2496:	4f e7       	ldi	r20, 0x7F	; 127
    2498:	57 e4       	ldi	r21, 0x47	; 71
    249a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    249e:	18 16       	cp	r1, r24
    24a0:	4c f5       	brge	.+82     	; 0x24f4 <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	40 e2       	ldi	r20, 0x20	; 32
    24b0:	51 e4       	ldi	r21, 0x41	; 65
    24b2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	bc 01       	movw	r22, r24
    24bc:	cd 01       	movw	r24, r26
    24be:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	9e 83       	std	Y+6, r25	; 0x06
    24c8:	8d 83       	std	Y+5, r24	; 0x05
    24ca:	0f c0       	rjmp	.+30     	; 0x24ea <LCD_init+0xe2>
    24cc:	89 e1       	ldi	r24, 0x19	; 25
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	9c 83       	std	Y+4, r25	; 0x04
    24d2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24d4:	8b 81       	ldd	r24, Y+3	; 0x03
    24d6:	9c 81       	ldd	r25, Y+4	; 0x04
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <LCD_init+0xd0>
    24dc:	9c 83       	std	Y+4, r25	; 0x04
    24de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e0:	8d 81       	ldd	r24, Y+5	; 0x05
    24e2:	9e 81       	ldd	r25, Y+6	; 0x06
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	9e 83       	std	Y+6, r25	; 0x06
    24e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ea:	8d 81       	ldd	r24, Y+5	; 0x05
    24ec:	9e 81       	ldd	r25, Y+6	; 0x06
    24ee:	00 97       	sbiw	r24, 0x00	; 0
    24f0:	69 f7       	brne	.-38     	; 0x24cc <LCD_init+0xc4>
    24f2:	14 c0       	rjmp	.+40     	; 0x251c <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f4:	6f 81       	ldd	r22, Y+7	; 0x07
    24f6:	78 85       	ldd	r23, Y+8	; 0x08
    24f8:	89 85       	ldd	r24, Y+9	; 0x09
    24fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	9e 83       	std	Y+6, r25	; 0x06
    2506:	8d 83       	std	Y+5, r24	; 0x05
    2508:	8d 81       	ldd	r24, Y+5	; 0x05
    250a:	9e 81       	ldd	r25, Y+6	; 0x06
    250c:	9a 83       	std	Y+2, r25	; 0x02
    250e:	89 83       	std	Y+1, r24	; 0x01
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	9a 81       	ldd	r25, Y+2	; 0x02
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <LCD_init+0x10c>
    2518:	9a 83       	std	Y+2, r25	; 0x02
    251a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	LCD_sendCommand(LCD_8BIT_MODE);
    251c:	88 e3       	ldi	r24, 0x38	; 56
    251e:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_sendCommand>
	_delay_ms(20);
	LCD_sendCommand(LCD_4BIT_MODE_FIRST_COMMAND);
	LCD_sendCommand(LCD_4BIT_MODE_SECOND_COMMAND);
	LCD_sendCommand(LCD_4BIT_MODE);
#endif
	LCD_sendCommand(LCD_CURSOR_OFF);
    2522:	8c e0       	ldi	r24, 0x0C	; 12
    2524:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_sendCommand>

}
    252e:	2e 96       	adiw	r28, 0x0e	; 14
    2530:	0f b6       	in	r0, 0x3f	; 63
    2532:	f8 94       	cli
    2534:	de bf       	out	0x3e, r29	; 62
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	cd bf       	out	0x3d, r28	; 61
    253a:	cf 91       	pop	r28
    253c:	df 91       	pop	r29
    253e:	08 95       	ret

00002540 <LCD_displayString>:
/*
 * to display string on lcd
 */
void LCD_displayString(const char *str){
    2540:	df 93       	push	r29
    2542:	cf 93       	push	r28
    2544:	00 d0       	rcall	.+0      	; 0x2546 <LCD_displayString+0x6>
    2546:	00 d0       	rcall	.+0      	; 0x2548 <LCD_displayString+0x8>
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
    254c:	9c 83       	std	Y+4, r25	; 0x04
    254e:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=0;str[i]!='\0';i++){
    2550:	1a 82       	std	Y+2, r1	; 0x02
    2552:	19 82       	std	Y+1, r1	; 0x01
    2554:	0f c0       	rjmp	.+30     	; 0x2574 <LCD_displayString+0x34>
		LCD_displayChar(str[i]);
    2556:	29 81       	ldd	r18, Y+1	; 0x01
    2558:	3a 81       	ldd	r19, Y+2	; 0x02
    255a:	8b 81       	ldd	r24, Y+3	; 0x03
    255c:	9c 81       	ldd	r25, Y+4	; 0x04
    255e:	fc 01       	movw	r30, r24
    2560:	e2 0f       	add	r30, r18
    2562:	f3 1f       	adc	r31, r19
    2564:	80 81       	ld	r24, Z
    2566:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <LCD_displayChar>
}
/*
 * to display string on lcd
 */
void LCD_displayString(const char *str){
	for(int i=0;str[i]!='\0';i++){
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	9a 81       	ldd	r25, Y+2	; 0x02
    256e:	01 96       	adiw	r24, 0x01	; 1
    2570:	9a 83       	std	Y+2, r25	; 0x02
    2572:	89 83       	std	Y+1, r24	; 0x01
    2574:	29 81       	ldd	r18, Y+1	; 0x01
    2576:	3a 81       	ldd	r19, Y+2	; 0x02
    2578:	8b 81       	ldd	r24, Y+3	; 0x03
    257a:	9c 81       	ldd	r25, Y+4	; 0x04
    257c:	fc 01       	movw	r30, r24
    257e:	e2 0f       	add	r30, r18
    2580:	f3 1f       	adc	r31, r19
    2582:	80 81       	ld	r24, Z
    2584:	88 23       	and	r24, r24
    2586:	39 f7       	brne	.-50     	; 0x2556 <LCD_displayString+0x16>
		LCD_displayChar(str[i]);
	}
}
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	0f 90       	pop	r0
    258e:	0f 90       	pop	r0
    2590:	cf 91       	pop	r28
    2592:	df 91       	pop	r29
    2594:	08 95       	ret

00002596 <LCD_moveCursor>:
/*
 * to change the position of the cursor on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col){
    2596:	df 93       	push	r29
    2598:	cf 93       	push	r28
    259a:	00 d0       	rcall	.+0      	; 0x259c <LCD_moveCursor+0x6>
    259c:	00 d0       	rcall	.+0      	; 0x259e <LCD_moveCursor+0x8>
    259e:	0f 92       	push	r0
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
    25a4:	8a 83       	std	Y+2, r24	; 0x02
    25a6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_address;
	switch(row){
    25a8:	8a 81       	ldd	r24, Y+2	; 0x02
    25aa:	28 2f       	mov	r18, r24
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	3d 83       	std	Y+5, r19	; 0x05
    25b0:	2c 83       	std	Y+4, r18	; 0x04
    25b2:	8c 81       	ldd	r24, Y+4	; 0x04
    25b4:	9d 81       	ldd	r25, Y+5	; 0x05
    25b6:	81 30       	cpi	r24, 0x01	; 1
    25b8:	91 05       	cpc	r25, r1
    25ba:	c1 f0       	breq	.+48     	; 0x25ec <LCD_moveCursor+0x56>
    25bc:	2c 81       	ldd	r18, Y+4	; 0x04
    25be:	3d 81       	ldd	r19, Y+5	; 0x05
    25c0:	22 30       	cpi	r18, 0x02	; 2
    25c2:	31 05       	cpc	r19, r1
    25c4:	2c f4       	brge	.+10     	; 0x25d0 <LCD_moveCursor+0x3a>
    25c6:	8c 81       	ldd	r24, Y+4	; 0x04
    25c8:	9d 81       	ldd	r25, Y+5	; 0x05
    25ca:	00 97       	sbiw	r24, 0x00	; 0
    25cc:	61 f0       	breq	.+24     	; 0x25e6 <LCD_moveCursor+0x50>
    25ce:	19 c0       	rjmp	.+50     	; 0x2602 <LCD_moveCursor+0x6c>
    25d0:	2c 81       	ldd	r18, Y+4	; 0x04
    25d2:	3d 81       	ldd	r19, Y+5	; 0x05
    25d4:	22 30       	cpi	r18, 0x02	; 2
    25d6:	31 05       	cpc	r19, r1
    25d8:	69 f0       	breq	.+26     	; 0x25f4 <LCD_moveCursor+0x5e>
    25da:	8c 81       	ldd	r24, Y+4	; 0x04
    25dc:	9d 81       	ldd	r25, Y+5	; 0x05
    25de:	83 30       	cpi	r24, 0x03	; 3
    25e0:	91 05       	cpc	r25, r1
    25e2:	61 f0       	breq	.+24     	; 0x25fc <LCD_moveCursor+0x66>
    25e4:	0e c0       	rjmp	.+28     	; 0x2602 <LCD_moveCursor+0x6c>
	case 0:
		LCD_address=col;
    25e6:	8b 81       	ldd	r24, Y+3	; 0x03
    25e8:	89 83       	std	Y+1, r24	; 0x01
    25ea:	0b c0       	rjmp	.+22     	; 0x2602 <LCD_moveCursor+0x6c>
		break;
	case 1:
		LCD_address=col+0x40;
    25ec:	8b 81       	ldd	r24, Y+3	; 0x03
    25ee:	80 5c       	subi	r24, 0xC0	; 192
    25f0:	89 83       	std	Y+1, r24	; 0x01
    25f2:	07 c0       	rjmp	.+14     	; 0x2602 <LCD_moveCursor+0x6c>
		break;
	case 2:
		LCD_address=col+0x10;
    25f4:	8b 81       	ldd	r24, Y+3	; 0x03
    25f6:	80 5f       	subi	r24, 0xF0	; 240
    25f8:	89 83       	std	Y+1, r24	; 0x01
    25fa:	03 c0       	rjmp	.+6      	; 0x2602 <LCD_moveCursor+0x6c>
		break;
	case 3:
		LCD_address=col+0x50;
    25fc:	8b 81       	ldd	r24, Y+3	; 0x03
    25fe:	80 5b       	subi	r24, 0xB0	; 176
    2600:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(LCD_CURSOR_TO_FIRST_LINE|LCD_address);
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	80 68       	ori	r24, 0x80	; 128
    2606:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_sendCommand>

}
    260a:	0f 90       	pop	r0
    260c:	0f 90       	pop	r0
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	cf 91       	pop	r28
    2616:	df 91       	pop	r29
    2618:	08 95       	ret

0000261a <LCD_displayStringRowColumn>:
/*
 * to display string in the desired position
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char* str){
    261a:	df 93       	push	r29
    261c:	cf 93       	push	r28
    261e:	00 d0       	rcall	.+0      	; 0x2620 <LCD_displayStringRowColumn+0x6>
    2620:	00 d0       	rcall	.+0      	; 0x2622 <LCD_displayStringRowColumn+0x8>
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
    2626:	89 83       	std	Y+1, r24	; 0x01
    2628:	6a 83       	std	Y+2, r22	; 0x02
    262a:	5c 83       	std	Y+4, r21	; 0x04
    262c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	6a 81       	ldd	r22, Y+2	; 0x02
    2632:	0e 94 cb 12 	call	0x2596	; 0x2596 <LCD_moveCursor>
	LCD_displayString(str);
    2636:	8b 81       	ldd	r24, Y+3	; 0x03
    2638:	9c 81       	ldd	r25, Y+4	; 0x04
    263a:	0e 94 a0 12 	call	0x2540	; 0x2540 <LCD_displayString>
}
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	08 95       	ret

0000264c <LCD_clearScreen>:
/*
 * to clear display
 */
void LCD_clearScreen(){
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	cd b7       	in	r28, 0x3d	; 61
    2652:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_sendCommand>
}
    265a:	cf 91       	pop	r28
    265c:	df 91       	pop	r29
    265e:	08 95       	ret

00002660 <LCD_integerToString>:
/*
 * to display integers
 */
void LCD_integerToString(int num){
    2660:	df 93       	push	r29
    2662:	cf 93       	push	r28
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
    2668:	2c 97       	sbiw	r28, 0x0c	; 12
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	f8 94       	cli
    266e:	de bf       	out	0x3e, r29	; 62
    2670:	0f be       	out	0x3f, r0	; 63
    2672:	cd bf       	out	0x3d, r28	; 61
    2674:	9c 87       	std	Y+12, r25	; 0x0c
    2676:	8b 87       	std	Y+11, r24	; 0x0b
	char buffer[10];
	itoa(num,buffer,10);
    2678:	8b 85       	ldd	r24, Y+11	; 0x0b
    267a:	9c 85       	ldd	r25, Y+12	; 0x0c
    267c:	9e 01       	movw	r18, r28
    267e:	2f 5f       	subi	r18, 0xFF	; 255
    2680:	3f 4f       	sbci	r19, 0xFF	; 255
    2682:	b9 01       	movw	r22, r18
    2684:	4a e0       	ldi	r20, 0x0A	; 10
    2686:	50 e0       	ldi	r21, 0x00	; 0
    2688:	0e 94 40 14 	call	0x2880	; 0x2880 <itoa>
	LCD_displayString(buffer);
    268c:	ce 01       	movw	r24, r28
    268e:	01 96       	adiw	r24, 0x01	; 1
    2690:	0e 94 a0 12 	call	0x2540	; 0x2540 <LCD_displayString>
}
    2694:	2c 96       	adiw	r28, 0x0c	; 12
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	de bf       	out	0x3e, r29	; 62
    269c:	0f be       	out	0x3f, r0	; 63
    269e:	cd bf       	out	0x3d, r28	; 61
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	08 95       	ret

000026a6 <LCD_floatToString>:
/*
 * to display float numbers
 */
void LCD_floatToString(double num){
    26a6:	0f 93       	push	r16
    26a8:	1f 93       	push	r17
    26aa:	df 93       	push	r29
    26ac:	cf 93       	push	r28
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
    26b2:	68 97       	sbiw	r28, 0x18	; 24
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	f8 94       	cli
    26b8:	de bf       	out	0x3e, r29	; 62
    26ba:	0f be       	out	0x3f, r0	; 63
    26bc:	cd bf       	out	0x3d, r28	; 61
    26be:	6d 8b       	std	Y+21, r22	; 0x15
    26c0:	7e 8b       	std	Y+22, r23	; 0x16
    26c2:	8f 8b       	std	Y+23, r24	; 0x17
    26c4:	98 8f       	std	Y+24, r25	; 0x18
	char buffer[20];
	dtostrf(num,5,3,buffer);
    26c6:	8d 89       	ldd	r24, Y+21	; 0x15
    26c8:	9e 89       	ldd	r25, Y+22	; 0x16
    26ca:	af 89       	ldd	r26, Y+23	; 0x17
    26cc:	b8 8d       	ldd	r27, Y+24	; 0x18
    26ce:	bc 01       	movw	r22, r24
    26d0:	cd 01       	movw	r24, r26
    26d2:	45 e0       	ldi	r20, 0x05	; 5
    26d4:	23 e0       	ldi	r18, 0x03	; 3
    26d6:	fe 01       	movw	r30, r28
    26d8:	31 96       	adiw	r30, 0x01	; 1
    26da:	8f 01       	movw	r16, r30
    26dc:	0e 94 1f 14 	call	0x283e	; 0x283e <dtostrf>
	LCD_displayString(buffer);
    26e0:	ce 01       	movw	r24, r28
    26e2:	01 96       	adiw	r24, 0x01	; 1
    26e4:	0e 94 a0 12 	call	0x2540	; 0x2540 <LCD_displayString>

}
    26e8:	68 96       	adiw	r28, 0x18	; 24
    26ea:	0f b6       	in	r0, 0x3f	; 63
    26ec:	f8 94       	cli
    26ee:	de bf       	out	0x3e, r29	; 62
    26f0:	0f be       	out	0x3f, r0	; 63
    26f2:	cd bf       	out	0x3d, r28	; 61
    26f4:	cf 91       	pop	r28
    26f6:	df 91       	pop	r29
    26f8:	1f 91       	pop	r17
    26fa:	0f 91       	pop	r16
    26fc:	08 95       	ret

000026fe <PWM_Timer0_start>:
 */

#include "pwm.h"
#include <avr/io.h>
#include "gpio.h"
void PWM_Timer0_start(uint8 duty_cycle){
    26fe:	0f 93       	push	r16
    2700:	1f 93       	push	r17
    2702:	df 93       	push	r29
    2704:	cf 93       	push	r28
    2706:	0f 92       	push	r0
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * initialize timer0 to generate fast pwm signal of
	 * frequency 500hz with non-inverting mode.
	 */
	TCCR0=(1<<WGM00)|(1<<WGM01)|(1<<COM01);
    270e:	e3 e5       	ldi	r30, 0x53	; 83
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	88 e6       	ldi	r24, 0x68	; 104
    2714:	80 83       	st	Z, r24
	TCNT0=0; /*add 0 in the timer register */
    2716:	e2 e5       	ldi	r30, 0x52	; 82
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	10 82       	st	Z, r1
	OCR0=255*((float)duty_cycle/100); /*set the compare value according to the required duty cycle*/
    271c:	0c e5       	ldi	r16, 0x5C	; 92
    271e:	10 e0       	ldi	r17, 0x00	; 0
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	88 2f       	mov	r24, r24
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	a0 e0       	ldi	r26, 0x00	; 0
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	bc 01       	movw	r22, r24
    272c:	cd 01       	movw	r24, r26
    272e:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	bc 01       	movw	r22, r24
    2738:	cd 01       	movw	r24, r26
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	48 ec       	ldi	r20, 0xC8	; 200
    2740:	52 e4       	ldi	r21, 0x42	; 66
    2742:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	bc 01       	movw	r22, r24
    274c:	cd 01       	movw	r24, r26
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	4f e7       	ldi	r20, 0x7F	; 127
    2754:	53 e4       	ldi	r21, 0x43	; 67
    2756:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	bc 01       	movw	r22, r24
    2760:	cd 01       	movw	r24, r26
    2762:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	f8 01       	movw	r30, r16
    276c:	80 83       	st	Z, r24
	TCCR0|=(1<<CS01); /*initialize clock with precaler value = FCPU/8*/
    276e:	a3 e5       	ldi	r26, 0x53	; 83
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	e3 e5       	ldi	r30, 0x53	; 83
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	82 60       	ori	r24, 0x02	; 2
    277a:	8c 93       	st	X, r24
	GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);/*setup oc0 as output pin*/
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	63 e0       	ldi	r22, 0x03	; 3
    2780:	41 e0       	ldi	r20, 0x01	; 1
    2782:	0e 94 a0 08 	call	0x1140	; 0x1140 <GPIO_setupPinDirection>
}
    2786:	0f 90       	pop	r0
    2788:	cf 91       	pop	r28
    278a:	df 91       	pop	r29
    278c:	1f 91       	pop	r17
    278e:	0f 91       	pop	r16
    2790:	08 95       	ret

00002792 <__mulsi3>:
    2792:	62 9f       	mul	r22, r18
    2794:	d0 01       	movw	r26, r0
    2796:	73 9f       	mul	r23, r19
    2798:	f0 01       	movw	r30, r0
    279a:	82 9f       	mul	r24, r18
    279c:	e0 0d       	add	r30, r0
    279e:	f1 1d       	adc	r31, r1
    27a0:	64 9f       	mul	r22, r20
    27a2:	e0 0d       	add	r30, r0
    27a4:	f1 1d       	adc	r31, r1
    27a6:	92 9f       	mul	r25, r18
    27a8:	f0 0d       	add	r31, r0
    27aa:	83 9f       	mul	r24, r19
    27ac:	f0 0d       	add	r31, r0
    27ae:	74 9f       	mul	r23, r20
    27b0:	f0 0d       	add	r31, r0
    27b2:	65 9f       	mul	r22, r21
    27b4:	f0 0d       	add	r31, r0
    27b6:	99 27       	eor	r25, r25
    27b8:	72 9f       	mul	r23, r18
    27ba:	b0 0d       	add	r27, r0
    27bc:	e1 1d       	adc	r30, r1
    27be:	f9 1f       	adc	r31, r25
    27c0:	63 9f       	mul	r22, r19
    27c2:	b0 0d       	add	r27, r0
    27c4:	e1 1d       	adc	r30, r1
    27c6:	f9 1f       	adc	r31, r25
    27c8:	bd 01       	movw	r22, r26
    27ca:	cf 01       	movw	r24, r30
    27cc:	11 24       	eor	r1, r1
    27ce:	08 95       	ret

000027d0 <__prologue_saves__>:
    27d0:	2f 92       	push	r2
    27d2:	3f 92       	push	r3
    27d4:	4f 92       	push	r4
    27d6:	5f 92       	push	r5
    27d8:	6f 92       	push	r6
    27da:	7f 92       	push	r7
    27dc:	8f 92       	push	r8
    27de:	9f 92       	push	r9
    27e0:	af 92       	push	r10
    27e2:	bf 92       	push	r11
    27e4:	cf 92       	push	r12
    27e6:	df 92       	push	r13
    27e8:	ef 92       	push	r14
    27ea:	ff 92       	push	r15
    27ec:	0f 93       	push	r16
    27ee:	1f 93       	push	r17
    27f0:	cf 93       	push	r28
    27f2:	df 93       	push	r29
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
    27f8:	ca 1b       	sub	r28, r26
    27fa:	db 0b       	sbc	r29, r27
    27fc:	0f b6       	in	r0, 0x3f	; 63
    27fe:	f8 94       	cli
    2800:	de bf       	out	0x3e, r29	; 62
    2802:	0f be       	out	0x3f, r0	; 63
    2804:	cd bf       	out	0x3d, r28	; 61
    2806:	09 94       	ijmp

00002808 <__epilogue_restores__>:
    2808:	2a 88       	ldd	r2, Y+18	; 0x12
    280a:	39 88       	ldd	r3, Y+17	; 0x11
    280c:	48 88       	ldd	r4, Y+16	; 0x10
    280e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2810:	6e 84       	ldd	r6, Y+14	; 0x0e
    2812:	7d 84       	ldd	r7, Y+13	; 0x0d
    2814:	8c 84       	ldd	r8, Y+12	; 0x0c
    2816:	9b 84       	ldd	r9, Y+11	; 0x0b
    2818:	aa 84       	ldd	r10, Y+10	; 0x0a
    281a:	b9 84       	ldd	r11, Y+9	; 0x09
    281c:	c8 84       	ldd	r12, Y+8	; 0x08
    281e:	df 80       	ldd	r13, Y+7	; 0x07
    2820:	ee 80       	ldd	r14, Y+6	; 0x06
    2822:	fd 80       	ldd	r15, Y+5	; 0x05
    2824:	0c 81       	ldd	r16, Y+4	; 0x04
    2826:	1b 81       	ldd	r17, Y+3	; 0x03
    2828:	aa 81       	ldd	r26, Y+2	; 0x02
    282a:	b9 81       	ldd	r27, Y+1	; 0x01
    282c:	ce 0f       	add	r28, r30
    282e:	d1 1d       	adc	r29, r1
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	f8 94       	cli
    2834:	de bf       	out	0x3e, r29	; 62
    2836:	0f be       	out	0x3f, r0	; 63
    2838:	cd bf       	out	0x3d, r28	; 61
    283a:	ed 01       	movw	r28, r26
    283c:	08 95       	ret

0000283e <dtostrf>:
    283e:	ef 92       	push	r14
    2840:	ff 92       	push	r15
    2842:	0f 93       	push	r16
    2844:	1f 93       	push	r17
    2846:	f2 2f       	mov	r31, r18
    2848:	f0 2e       	mov	r15, r16
    284a:	47 fd       	sbrc	r20, 7
    284c:	02 c0       	rjmp	.+4      	; 0x2852 <dtostrf+0x14>
    284e:	e4 e0       	ldi	r30, 0x04	; 4
    2850:	01 c0       	rjmp	.+2      	; 0x2854 <dtostrf+0x16>
    2852:	e4 e1       	ldi	r30, 0x14	; 20
    2854:	24 2f       	mov	r18, r20
    2856:	33 27       	eor	r19, r19
    2858:	27 fd       	sbrc	r18, 7
    285a:	30 95       	com	r19
    285c:	37 ff       	sbrs	r19, 7
    285e:	03 c0       	rjmp	.+6      	; 0x2866 <dtostrf+0x28>
    2860:	30 95       	com	r19
    2862:	21 95       	neg	r18
    2864:	3f 4f       	sbci	r19, 0xFF	; 255
    2866:	4f 2d       	mov	r20, r15
    2868:	51 2f       	mov	r21, r17
    286a:	0f 2f       	mov	r16, r31
    286c:	ee 2e       	mov	r14, r30
    286e:	0e 94 61 14 	call	0x28c2	; 0x28c2 <dtoa_prf>
    2872:	8f 2d       	mov	r24, r15
    2874:	91 2f       	mov	r25, r17
    2876:	1f 91       	pop	r17
    2878:	0f 91       	pop	r16
    287a:	ff 90       	pop	r15
    287c:	ef 90       	pop	r14
    287e:	08 95       	ret

00002880 <itoa>:
    2880:	fb 01       	movw	r30, r22
    2882:	9f 01       	movw	r18, r30
    2884:	e8 94       	clt
    2886:	42 30       	cpi	r20, 0x02	; 2
    2888:	c4 f0       	brlt	.+48     	; 0x28ba <itoa+0x3a>
    288a:	45 32       	cpi	r20, 0x25	; 37
    288c:	b4 f4       	brge	.+44     	; 0x28ba <itoa+0x3a>
    288e:	4a 30       	cpi	r20, 0x0A	; 10
    2890:	29 f4       	brne	.+10     	; 0x289c <itoa+0x1c>
    2892:	97 fb       	bst	r25, 7
    2894:	1e f4       	brtc	.+6      	; 0x289c <itoa+0x1c>
    2896:	90 95       	com	r25
    2898:	81 95       	neg	r24
    289a:	9f 4f       	sbci	r25, 0xFF	; 255
    289c:	64 2f       	mov	r22, r20
    289e:	77 27       	eor	r23, r23
    28a0:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__udivmodhi4>
    28a4:	80 5d       	subi	r24, 0xD0	; 208
    28a6:	8a 33       	cpi	r24, 0x3A	; 58
    28a8:	0c f0       	brlt	.+2      	; 0x28ac <itoa+0x2c>
    28aa:	89 5d       	subi	r24, 0xD9	; 217
    28ac:	81 93       	st	Z+, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	00 97       	sbiw	r24, 0x00	; 0
    28b2:	a1 f7       	brne	.-24     	; 0x289c <itoa+0x1c>
    28b4:	16 f4       	brtc	.+4      	; 0x28ba <itoa+0x3a>
    28b6:	5d e2       	ldi	r21, 0x2D	; 45
    28b8:	51 93       	st	Z+, r21
    28ba:	10 82       	st	Z, r1
    28bc:	c9 01       	movw	r24, r18
    28be:	0c 94 9b 16 	jmp	0x2d36	; 0x2d36 <strrev>

000028c2 <dtoa_prf>:
    28c2:	a9 e0       	ldi	r26, 0x09	; 9
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	e7 e6       	ldi	r30, 0x67	; 103
    28c8:	f4 e1       	ldi	r31, 0x14	; 20
    28ca:	0c 94 ec 13 	jmp	0x27d8	; 0x27d8 <__prologue_saves__+0x8>
    28ce:	6a 01       	movw	r12, r20
    28d0:	12 2f       	mov	r17, r18
    28d2:	a0 2e       	mov	r10, r16
    28d4:	be 2c       	mov	r11, r14
    28d6:	2b e3       	ldi	r18, 0x3B	; 59
    28d8:	20 17       	cp	r18, r16
    28da:	18 f4       	brcc	.+6      	; 0x28e2 <dtoa_prf+0x20>
    28dc:	2c e3       	ldi	r18, 0x3C	; 60
    28de:	92 2e       	mov	r9, r18
    28e0:	02 c0       	rjmp	.+4      	; 0x28e6 <dtoa_prf+0x24>
    28e2:	90 2e       	mov	r9, r16
    28e4:	93 94       	inc	r9
    28e6:	ae 01       	movw	r20, r28
    28e8:	4f 5f       	subi	r20, 0xFF	; 255
    28ea:	5f 4f       	sbci	r21, 0xFF	; 255
    28ec:	27 e0       	ldi	r18, 0x07	; 7
    28ee:	09 2d       	mov	r16, r9
    28f0:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <__ftoa_engine>
    28f4:	bc 01       	movw	r22, r24
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	e8 2e       	mov	r14, r24
    28fa:	ff 24       	eor	r15, r15
    28fc:	c7 01       	movw	r24, r14
    28fe:	89 70       	andi	r24, 0x09	; 9
    2900:	90 70       	andi	r25, 0x00	; 0
    2902:	01 97       	sbiw	r24, 0x01	; 1
    2904:	11 f4       	brne	.+4      	; 0x290a <dtoa_prf+0x48>
    2906:	ad e2       	ldi	r26, 0x2D	; 45
    2908:	09 c0       	rjmp	.+18     	; 0x291c <dtoa_prf+0x5a>
    290a:	b1 fe       	sbrs	r11, 1
    290c:	02 c0       	rjmp	.+4      	; 0x2912 <dtoa_prf+0x50>
    290e:	ab e2       	ldi	r26, 0x2B	; 43
    2910:	05 c0       	rjmp	.+10     	; 0x291c <dtoa_prf+0x5a>
    2912:	b0 fc       	sbrc	r11, 0
    2914:	02 c0       	rjmp	.+4      	; 0x291a <dtoa_prf+0x58>
    2916:	a0 e0       	ldi	r26, 0x00	; 0
    2918:	01 c0       	rjmp	.+2      	; 0x291c <dtoa_prf+0x5a>
    291a:	a0 e2       	ldi	r26, 0x20	; 32
    291c:	e3 fe       	sbrs	r14, 3
    291e:	3b c0       	rjmp	.+118    	; 0x2996 <dtoa_prf+0xd4>
    2920:	aa 23       	and	r26, r26
    2922:	11 f4       	brne	.+4      	; 0x2928 <dtoa_prf+0x66>
    2924:	23 e0       	ldi	r18, 0x03	; 3
    2926:	01 c0       	rjmp	.+2      	; 0x292a <dtoa_prf+0x68>
    2928:	24 e0       	ldi	r18, 0x04	; 4
    292a:	21 17       	cp	r18, r17
    292c:	10 f0       	brcs	.+4      	; 0x2932 <dtoa_prf+0x70>
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	02 c0       	rjmp	.+4      	; 0x2936 <dtoa_prf+0x74>
    2932:	12 1b       	sub	r17, r18
    2934:	21 2f       	mov	r18, r17
    2936:	eb 2c       	mov	r14, r11
    2938:	b4 fe       	sbrs	r11, 4
    293a:	02 c0       	rjmp	.+4      	; 0x2940 <dtoa_prf+0x7e>
    293c:	32 2f       	mov	r19, r18
    293e:	0a c0       	rjmp	.+20     	; 0x2954 <dtoa_prf+0x92>
    2940:	f6 01       	movw	r30, r12
    2942:	32 2f       	mov	r19, r18
    2944:	80 e2       	ldi	r24, 0x20	; 32
    2946:	02 c0       	rjmp	.+4      	; 0x294c <dtoa_prf+0x8a>
    2948:	81 93       	st	Z+, r24
    294a:	31 50       	subi	r19, 0x01	; 1
    294c:	33 23       	and	r19, r19
    294e:	e1 f7       	brne	.-8      	; 0x2948 <dtoa_prf+0x86>
    2950:	c2 0e       	add	r12, r18
    2952:	d1 1c       	adc	r13, r1
    2954:	aa 23       	and	r26, r26
    2956:	19 f0       	breq	.+6      	; 0x295e <dtoa_prf+0x9c>
    2958:	f6 01       	movw	r30, r12
    295a:	a1 93       	st	Z+, r26
    295c:	6f 01       	movw	r12, r30
    295e:	f6 01       	movw	r30, r12
    2960:	31 96       	adiw	r30, 0x01	; 1
    2962:	e2 fe       	sbrs	r14, 2
    2964:	05 c0       	rjmp	.+10     	; 0x2970 <dtoa_prf+0xae>
    2966:	9e e4       	ldi	r25, 0x4E	; 78
    2968:	d6 01       	movw	r26, r12
    296a:	9c 93       	st	X, r25
    296c:	81 e4       	ldi	r24, 0x41	; 65
    296e:	04 c0       	rjmp	.+8      	; 0x2978 <dtoa_prf+0xb6>
    2970:	9e e6       	ldi	r25, 0x6E	; 110
    2972:	d6 01       	movw	r26, r12
    2974:	9c 93       	st	X, r25
    2976:	81 e6       	ldi	r24, 0x61	; 97
    2978:	11 96       	adiw	r26, 0x01	; 1
    297a:	8c 93       	st	X, r24
    297c:	91 83       	std	Z+1, r25	; 0x01
    297e:	32 96       	adiw	r30, 0x02	; 2
    2980:	df 01       	movw	r26, r30
    2982:	83 2f       	mov	r24, r19
    2984:	90 e2       	ldi	r25, 0x20	; 32
    2986:	02 c0       	rjmp	.+4      	; 0x298c <dtoa_prf+0xca>
    2988:	9d 93       	st	X+, r25
    298a:	81 50       	subi	r24, 0x01	; 1
    298c:	88 23       	and	r24, r24
    298e:	e1 f7       	brne	.-8      	; 0x2988 <dtoa_prf+0xc6>
    2990:	e3 0f       	add	r30, r19
    2992:	f1 1d       	adc	r31, r1
    2994:	40 c0       	rjmp	.+128    	; 0x2a16 <dtoa_prf+0x154>
    2996:	e2 fe       	sbrs	r14, 2
    2998:	42 c0       	rjmp	.+132    	; 0x2a1e <dtoa_prf+0x15c>
    299a:	aa 23       	and	r26, r26
    299c:	11 f4       	brne	.+4      	; 0x29a2 <dtoa_prf+0xe0>
    299e:	23 e0       	ldi	r18, 0x03	; 3
    29a0:	01 c0       	rjmp	.+2      	; 0x29a4 <dtoa_prf+0xe2>
    29a2:	24 e0       	ldi	r18, 0x04	; 4
    29a4:	21 17       	cp	r18, r17
    29a6:	10 f0       	brcs	.+4      	; 0x29ac <dtoa_prf+0xea>
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	02 c0       	rjmp	.+4      	; 0x29b0 <dtoa_prf+0xee>
    29ac:	12 1b       	sub	r17, r18
    29ae:	21 2f       	mov	r18, r17
    29b0:	eb 2c       	mov	r14, r11
    29b2:	b4 fe       	sbrs	r11, 4
    29b4:	02 c0       	rjmp	.+4      	; 0x29ba <dtoa_prf+0xf8>
    29b6:	92 2f       	mov	r25, r18
    29b8:	0a c0       	rjmp	.+20     	; 0x29ce <dtoa_prf+0x10c>
    29ba:	f6 01       	movw	r30, r12
    29bc:	92 2f       	mov	r25, r18
    29be:	80 e2       	ldi	r24, 0x20	; 32
    29c0:	02 c0       	rjmp	.+4      	; 0x29c6 <dtoa_prf+0x104>
    29c2:	81 93       	st	Z+, r24
    29c4:	91 50       	subi	r25, 0x01	; 1
    29c6:	99 23       	and	r25, r25
    29c8:	e1 f7       	brne	.-8      	; 0x29c2 <dtoa_prf+0x100>
    29ca:	c2 0e       	add	r12, r18
    29cc:	d1 1c       	adc	r13, r1
    29ce:	aa 23       	and	r26, r26
    29d0:	19 f0       	breq	.+6      	; 0x29d8 <dtoa_prf+0x116>
    29d2:	f6 01       	movw	r30, r12
    29d4:	a1 93       	st	Z+, r26
    29d6:	6f 01       	movw	r12, r30
    29d8:	f6 01       	movw	r30, r12
    29da:	31 96       	adiw	r30, 0x01	; 1
    29dc:	e2 fe       	sbrs	r14, 2
    29de:	08 c0       	rjmp	.+16     	; 0x29f0 <dtoa_prf+0x12e>
    29e0:	89 e4       	ldi	r24, 0x49	; 73
    29e2:	d6 01       	movw	r26, r12
    29e4:	8c 93       	st	X, r24
    29e6:	8e e4       	ldi	r24, 0x4E	; 78
    29e8:	11 96       	adiw	r26, 0x01	; 1
    29ea:	8c 93       	st	X, r24
    29ec:	86 e4       	ldi	r24, 0x46	; 70
    29ee:	07 c0       	rjmp	.+14     	; 0x29fe <dtoa_prf+0x13c>
    29f0:	89 e6       	ldi	r24, 0x69	; 105
    29f2:	d6 01       	movw	r26, r12
    29f4:	8c 93       	st	X, r24
    29f6:	8e e6       	ldi	r24, 0x6E	; 110
    29f8:	11 96       	adiw	r26, 0x01	; 1
    29fa:	8c 93       	st	X, r24
    29fc:	86 e6       	ldi	r24, 0x66	; 102
    29fe:	81 83       	std	Z+1, r24	; 0x01
    2a00:	32 96       	adiw	r30, 0x02	; 2
    2a02:	df 01       	movw	r26, r30
    2a04:	89 2f       	mov	r24, r25
    2a06:	20 e2       	ldi	r18, 0x20	; 32
    2a08:	02 c0       	rjmp	.+4      	; 0x2a0e <dtoa_prf+0x14c>
    2a0a:	2d 93       	st	X+, r18
    2a0c:	81 50       	subi	r24, 0x01	; 1
    2a0e:	88 23       	and	r24, r24
    2a10:	e1 f7       	brne	.-8      	; 0x2a0a <dtoa_prf+0x148>
    2a12:	e9 0f       	add	r30, r25
    2a14:	f1 1d       	adc	r31, r1
    2a16:	10 82       	st	Z, r1
    2a18:	2e ef       	ldi	r18, 0xFE	; 254
    2a1a:	3f ef       	ldi	r19, 0xFF	; 255
    2a1c:	af c0       	rjmp	.+350    	; 0x2b7c <dtoa_prf+0x2ba>
    2a1e:	16 16       	cp	r1, r22
    2a20:	17 06       	cpc	r1, r23
    2a22:	1c f0       	brlt	.+6      	; 0x2a2a <dtoa_prf+0x168>
    2a24:	41 e0       	ldi	r20, 0x01	; 1
    2a26:	50 e0       	ldi	r21, 0x00	; 0
    2a28:	03 c0       	rjmp	.+6      	; 0x2a30 <dtoa_prf+0x16e>
    2a2a:	ab 01       	movw	r20, r22
    2a2c:	4f 5f       	subi	r20, 0xFF	; 255
    2a2e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a30:	aa 20       	and	r10, r10
    2a32:	19 f4       	brne	.+6      	; 0x2a3a <dtoa_prf+0x178>
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	03 c0       	rjmp	.+6      	; 0x2a40 <dtoa_prf+0x17e>
    2a3a:	8a 2d       	mov	r24, r10
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	01 96       	adiw	r24, 0x01	; 1
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	aa 23       	and	r26, r26
    2a46:	11 f0       	breq	.+4      	; 0x2a4c <dtoa_prf+0x18a>
    2a48:	21 e0       	ldi	r18, 0x01	; 1
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	24 0f       	add	r18, r20
    2a4e:	35 1f       	adc	r19, r21
    2a50:	28 0f       	add	r18, r24
    2a52:	39 1f       	adc	r19, r25
    2a54:	81 2f       	mov	r24, r17
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	28 17       	cp	r18, r24
    2a5a:	39 07       	cpc	r19, r25
    2a5c:	14 f0       	brlt	.+4      	; 0x2a62 <dtoa_prf+0x1a0>
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	02 c0       	rjmp	.+4      	; 0x2a66 <dtoa_prf+0x1a4>
    2a62:	12 1b       	sub	r17, r18
    2a64:	21 2f       	mov	r18, r17
    2a66:	4b 2d       	mov	r20, r11
    2a68:	50 e0       	ldi	r21, 0x00	; 0
    2a6a:	ca 01       	movw	r24, r20
    2a6c:	80 71       	andi	r24, 0x10	; 16
    2a6e:	90 70       	andi	r25, 0x00	; 0
    2a70:	b4 fc       	sbrc	r11, 4
    2a72:	0d c0       	rjmp	.+26     	; 0x2a8e <dtoa_prf+0x1cc>
    2a74:	b3 fc       	sbrc	r11, 3
    2a76:	0b c0       	rjmp	.+22     	; 0x2a8e <dtoa_prf+0x1cc>
    2a78:	f6 01       	movw	r30, r12
    2a7a:	32 2f       	mov	r19, r18
    2a7c:	40 e2       	ldi	r20, 0x20	; 32
    2a7e:	02 c0       	rjmp	.+4      	; 0x2a84 <dtoa_prf+0x1c2>
    2a80:	41 93       	st	Z+, r20
    2a82:	31 50       	subi	r19, 0x01	; 1
    2a84:	33 23       	and	r19, r19
    2a86:	e1 f7       	brne	.-8      	; 0x2a80 <dtoa_prf+0x1be>
    2a88:	c2 0e       	add	r12, r18
    2a8a:	d1 1c       	adc	r13, r1
    2a8c:	01 c0       	rjmp	.+2      	; 0x2a90 <dtoa_prf+0x1ce>
    2a8e:	32 2f       	mov	r19, r18
    2a90:	aa 23       	and	r26, r26
    2a92:	19 f0       	breq	.+6      	; 0x2a9a <dtoa_prf+0x1d8>
    2a94:	f6 01       	movw	r30, r12
    2a96:	a1 93       	st	Z+, r26
    2a98:	6f 01       	movw	r12, r30
    2a9a:	89 2b       	or	r24, r25
    2a9c:	11 f0       	breq	.+4      	; 0x2aa2 <dtoa_prf+0x1e0>
    2a9e:	13 2f       	mov	r17, r19
    2aa0:	0a c0       	rjmp	.+20     	; 0x2ab6 <dtoa_prf+0x1f4>
    2aa2:	f6 01       	movw	r30, r12
    2aa4:	13 2f       	mov	r17, r19
    2aa6:	80 e3       	ldi	r24, 0x30	; 48
    2aa8:	02 c0       	rjmp	.+4      	; 0x2aae <dtoa_prf+0x1ec>
    2aaa:	81 93       	st	Z+, r24
    2aac:	11 50       	subi	r17, 0x01	; 1
    2aae:	11 23       	and	r17, r17
    2ab0:	e1 f7       	brne	.-8      	; 0x2aaa <dtoa_prf+0x1e8>
    2ab2:	c3 0e       	add	r12, r19
    2ab4:	d1 1c       	adc	r13, r1
    2ab6:	09 2d       	mov	r16, r9
    2ab8:	06 0f       	add	r16, r22
    2aba:	ba 80       	ldd	r11, Y+2	; 0x02
    2abc:	90 e1       	ldi	r25, 0x10	; 16
    2abe:	89 2e       	mov	r8, r25
    2ac0:	91 2c       	mov	r9, r1
    2ac2:	8e 20       	and	r8, r14
    2ac4:	9f 20       	and	r9, r15
    2ac6:	e4 fe       	sbrs	r14, 4
    2ac8:	04 c0       	rjmp	.+8      	; 0x2ad2 <dtoa_prf+0x210>
    2aca:	f1 e3       	ldi	r31, 0x31	; 49
    2acc:	bf 16       	cp	r11, r31
    2ace:	09 f4       	brne	.+2      	; 0x2ad2 <dtoa_prf+0x210>
    2ad0:	01 50       	subi	r16, 0x01	; 1
    2ad2:	10 16       	cp	r1, r16
    2ad4:	14 f0       	brlt	.+4      	; 0x2ada <dtoa_prf+0x218>
    2ad6:	01 e0       	ldi	r16, 0x01	; 1
    2ad8:	03 c0       	rjmp	.+6      	; 0x2ae0 <dtoa_prf+0x21e>
    2ada:	09 30       	cpi	r16, 0x09	; 9
    2adc:	08 f0       	brcs	.+2      	; 0x2ae0 <dtoa_prf+0x21e>
    2ade:	08 e0       	ldi	r16, 0x08	; 8
    2ae0:	9b 01       	movw	r18, r22
    2ae2:	77 ff       	sbrs	r23, 7
    2ae4:	02 c0       	rjmp	.+4      	; 0x2aea <dtoa_prf+0x228>
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	cb 01       	movw	r24, r22
    2aec:	01 96       	adiw	r24, 0x01	; 1
    2aee:	82 1b       	sub	r24, r18
    2af0:	93 0b       	sbc	r25, r19
    2af2:	fe 01       	movw	r30, r28
    2af4:	31 96       	adiw	r30, 0x01	; 1
    2af6:	e8 0f       	add	r30, r24
    2af8:	f9 1f       	adc	r31, r25
    2afa:	8e e2       	ldi	r24, 0x2E	; 46
    2afc:	f8 2e       	mov	r15, r24
    2afe:	3b 01       	movw	r6, r22
    2b00:	60 1a       	sub	r6, r16
    2b02:	71 08       	sbc	r7, r1
    2b04:	8a 2d       	mov	r24, r10
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	44 27       	eor	r20, r20
    2b0a:	55 27       	eor	r21, r21
    2b0c:	48 1b       	sub	r20, r24
    2b0e:	59 0b       	sbc	r21, r25
    2b10:	8f ef       	ldi	r24, 0xFF	; 255
    2b12:	2f 3f       	cpi	r18, 0xFF	; 255
    2b14:	38 07       	cpc	r19, r24
    2b16:	19 f4       	brne	.+6      	; 0x2b1e <dtoa_prf+0x25c>
    2b18:	d6 01       	movw	r26, r12
    2b1a:	fd 92       	st	X+, r15
    2b1c:	6d 01       	movw	r12, r26
    2b1e:	62 17       	cp	r22, r18
    2b20:	73 07       	cpc	r23, r19
    2b22:	2c f0       	brlt	.+10     	; 0x2b2e <dtoa_prf+0x26c>
    2b24:	62 16       	cp	r6, r18
    2b26:	73 06       	cpc	r7, r19
    2b28:	14 f4       	brge	.+4      	; 0x2b2e <dtoa_prf+0x26c>
    2b2a:	80 81       	ld	r24, Z
    2b2c:	01 c0       	rjmp	.+2      	; 0x2b30 <dtoa_prf+0x26e>
    2b2e:	80 e3       	ldi	r24, 0x30	; 48
    2b30:	21 50       	subi	r18, 0x01	; 1
    2b32:	30 40       	sbci	r19, 0x00	; 0
    2b34:	31 96       	adiw	r30, 0x01	; 1
    2b36:	24 17       	cp	r18, r20
    2b38:	35 07       	cpc	r19, r21
    2b3a:	24 f0       	brlt	.+8      	; 0x2b44 <dtoa_prf+0x282>
    2b3c:	d6 01       	movw	r26, r12
    2b3e:	8d 93       	st	X+, r24
    2b40:	6d 01       	movw	r12, r26
    2b42:	e6 cf       	rjmp	.-52     	; 0x2b10 <dtoa_prf+0x24e>
    2b44:	26 17       	cp	r18, r22
    2b46:	37 07       	cpc	r19, r23
    2b48:	49 f4       	brne	.+18     	; 0x2b5c <dtoa_prf+0x29a>
    2b4a:	b5 e3       	ldi	r27, 0x35	; 53
    2b4c:	bb 15       	cp	r27, r11
    2b4e:	28 f0       	brcs	.+10     	; 0x2b5a <dtoa_prf+0x298>
    2b50:	bb 16       	cp	r11, r27
    2b52:	21 f4       	brne	.+8      	; 0x2b5c <dtoa_prf+0x29a>
    2b54:	81 14       	cp	r8, r1
    2b56:	91 04       	cpc	r9, r1
    2b58:	09 f4       	brne	.+2      	; 0x2b5c <dtoa_prf+0x29a>
    2b5a:	81 e3       	ldi	r24, 0x31	; 49
    2b5c:	f6 01       	movw	r30, r12
    2b5e:	81 93       	st	Z+, r24
    2b60:	d6 01       	movw	r26, r12
    2b62:	81 2f       	mov	r24, r17
    2b64:	90 e2       	ldi	r25, 0x20	; 32
    2b66:	02 c0       	rjmp	.+4      	; 0x2b6c <dtoa_prf+0x2aa>
    2b68:	9c 93       	st	X, r25
    2b6a:	81 50       	subi	r24, 0x01	; 1
    2b6c:	11 96       	adiw	r26, 0x01	; 1
    2b6e:	88 23       	and	r24, r24
    2b70:	d9 f7       	brne	.-10     	; 0x2b68 <dtoa_prf+0x2a6>
    2b72:	e1 0f       	add	r30, r17
    2b74:	f1 1d       	adc	r31, r1
    2b76:	10 82       	st	Z, r1
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	c9 01       	movw	r24, r18
    2b7e:	29 96       	adiw	r28, 0x09	; 9
    2b80:	ee e0       	ldi	r30, 0x0E	; 14
    2b82:	0c 94 08 14 	jmp	0x2810	; 0x2810 <__epilogue_restores__+0x8>

00002b86 <__ftoa_engine>:
    2b86:	28 30       	cpi	r18, 0x08	; 8
    2b88:	08 f0       	brcs	.+2      	; 0x2b8c <__ftoa_engine+0x6>
    2b8a:	27 e0       	ldi	r18, 0x07	; 7
    2b8c:	33 27       	eor	r19, r19
    2b8e:	da 01       	movw	r26, r20
    2b90:	99 0f       	add	r25, r25
    2b92:	31 1d       	adc	r19, r1
    2b94:	87 fd       	sbrc	r24, 7
    2b96:	91 60       	ori	r25, 0x01	; 1
    2b98:	00 96       	adiw	r24, 0x00	; 0
    2b9a:	61 05       	cpc	r22, r1
    2b9c:	71 05       	cpc	r23, r1
    2b9e:	39 f4       	brne	.+14     	; 0x2bae <__ftoa_engine+0x28>
    2ba0:	32 60       	ori	r19, 0x02	; 2
    2ba2:	2e 5f       	subi	r18, 0xFE	; 254
    2ba4:	3d 93       	st	X+, r19
    2ba6:	30 e3       	ldi	r19, 0x30	; 48
    2ba8:	2a 95       	dec	r18
    2baa:	e1 f7       	brne	.-8      	; 0x2ba4 <__ftoa_engine+0x1e>
    2bac:	08 95       	ret
    2bae:	9f 3f       	cpi	r25, 0xFF	; 255
    2bb0:	30 f0       	brcs	.+12     	; 0x2bbe <__ftoa_engine+0x38>
    2bb2:	80 38       	cpi	r24, 0x80	; 128
    2bb4:	71 05       	cpc	r23, r1
    2bb6:	61 05       	cpc	r22, r1
    2bb8:	09 f0       	breq	.+2      	; 0x2bbc <__ftoa_engine+0x36>
    2bba:	3c 5f       	subi	r19, 0xFC	; 252
    2bbc:	3c 5f       	subi	r19, 0xFC	; 252
    2bbe:	3d 93       	st	X+, r19
    2bc0:	91 30       	cpi	r25, 0x01	; 1
    2bc2:	08 f0       	brcs	.+2      	; 0x2bc6 <__ftoa_engine+0x40>
    2bc4:	80 68       	ori	r24, 0x80	; 128
    2bc6:	91 1d       	adc	r25, r1
    2bc8:	df 93       	push	r29
    2bca:	cf 93       	push	r28
    2bcc:	1f 93       	push	r17
    2bce:	0f 93       	push	r16
    2bd0:	ff 92       	push	r15
    2bd2:	ef 92       	push	r14
    2bd4:	19 2f       	mov	r17, r25
    2bd6:	98 7f       	andi	r25, 0xF8	; 248
    2bd8:	96 95       	lsr	r25
    2bda:	e9 2f       	mov	r30, r25
    2bdc:	96 95       	lsr	r25
    2bde:	96 95       	lsr	r25
    2be0:	e9 0f       	add	r30, r25
    2be2:	ff 27       	eor	r31, r31
    2be4:	e2 55       	subi	r30, 0x52	; 82
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	99 27       	eor	r25, r25
    2bea:	33 27       	eor	r19, r19
    2bec:	ee 24       	eor	r14, r14
    2bee:	ff 24       	eor	r15, r15
    2bf0:	a7 01       	movw	r20, r14
    2bf2:	e7 01       	movw	r28, r14
    2bf4:	05 90       	lpm	r0, Z+
    2bf6:	08 94       	sec
    2bf8:	07 94       	ror	r0
    2bfa:	28 f4       	brcc	.+10     	; 0x2c06 <__ftoa_engine+0x80>
    2bfc:	36 0f       	add	r19, r22
    2bfe:	e7 1e       	adc	r14, r23
    2c00:	f8 1e       	adc	r15, r24
    2c02:	49 1f       	adc	r20, r25
    2c04:	51 1d       	adc	r21, r1
    2c06:	66 0f       	add	r22, r22
    2c08:	77 1f       	adc	r23, r23
    2c0a:	88 1f       	adc	r24, r24
    2c0c:	99 1f       	adc	r25, r25
    2c0e:	06 94       	lsr	r0
    2c10:	a1 f7       	brne	.-24     	; 0x2bfa <__ftoa_engine+0x74>
    2c12:	05 90       	lpm	r0, Z+
    2c14:	07 94       	ror	r0
    2c16:	28 f4       	brcc	.+10     	; 0x2c22 <__ftoa_engine+0x9c>
    2c18:	e7 0e       	add	r14, r23
    2c1a:	f8 1e       	adc	r15, r24
    2c1c:	49 1f       	adc	r20, r25
    2c1e:	56 1f       	adc	r21, r22
    2c20:	c1 1d       	adc	r28, r1
    2c22:	77 0f       	add	r23, r23
    2c24:	88 1f       	adc	r24, r24
    2c26:	99 1f       	adc	r25, r25
    2c28:	66 1f       	adc	r22, r22
    2c2a:	06 94       	lsr	r0
    2c2c:	a1 f7       	brne	.-24     	; 0x2c16 <__ftoa_engine+0x90>
    2c2e:	05 90       	lpm	r0, Z+
    2c30:	07 94       	ror	r0
    2c32:	28 f4       	brcc	.+10     	; 0x2c3e <__ftoa_engine+0xb8>
    2c34:	f8 0e       	add	r15, r24
    2c36:	49 1f       	adc	r20, r25
    2c38:	56 1f       	adc	r21, r22
    2c3a:	c7 1f       	adc	r28, r23
    2c3c:	d1 1d       	adc	r29, r1
    2c3e:	88 0f       	add	r24, r24
    2c40:	99 1f       	adc	r25, r25
    2c42:	66 1f       	adc	r22, r22
    2c44:	77 1f       	adc	r23, r23
    2c46:	06 94       	lsr	r0
    2c48:	a1 f7       	brne	.-24     	; 0x2c32 <__ftoa_engine+0xac>
    2c4a:	05 90       	lpm	r0, Z+
    2c4c:	07 94       	ror	r0
    2c4e:	20 f4       	brcc	.+8      	; 0x2c58 <__ftoa_engine+0xd2>
    2c50:	49 0f       	add	r20, r25
    2c52:	56 1f       	adc	r21, r22
    2c54:	c7 1f       	adc	r28, r23
    2c56:	d8 1f       	adc	r29, r24
    2c58:	99 0f       	add	r25, r25
    2c5a:	66 1f       	adc	r22, r22
    2c5c:	77 1f       	adc	r23, r23
    2c5e:	88 1f       	adc	r24, r24
    2c60:	06 94       	lsr	r0
    2c62:	a9 f7       	brne	.-22     	; 0x2c4e <__ftoa_engine+0xc8>
    2c64:	84 91       	lpm	r24, Z+
    2c66:	10 95       	com	r17
    2c68:	17 70       	andi	r17, 0x07	; 7
    2c6a:	41 f0       	breq	.+16     	; 0x2c7c <__ftoa_engine+0xf6>
    2c6c:	d6 95       	lsr	r29
    2c6e:	c7 95       	ror	r28
    2c70:	57 95       	ror	r21
    2c72:	47 95       	ror	r20
    2c74:	f7 94       	ror	r15
    2c76:	e7 94       	ror	r14
    2c78:	1a 95       	dec	r17
    2c7a:	c1 f7       	brne	.-16     	; 0x2c6c <__ftoa_engine+0xe6>
    2c7c:	e4 e5       	ldi	r30, 0x54	; 84
    2c7e:	f0 e0       	ldi	r31, 0x00	; 0
    2c80:	68 94       	set
    2c82:	15 90       	lpm	r1, Z+
    2c84:	15 91       	lpm	r17, Z+
    2c86:	35 91       	lpm	r19, Z+
    2c88:	65 91       	lpm	r22, Z+
    2c8a:	95 91       	lpm	r25, Z+
    2c8c:	05 90       	lpm	r0, Z+
    2c8e:	7f e2       	ldi	r23, 0x2F	; 47
    2c90:	73 95       	inc	r23
    2c92:	e1 18       	sub	r14, r1
    2c94:	f1 0a       	sbc	r15, r17
    2c96:	43 0b       	sbc	r20, r19
    2c98:	56 0b       	sbc	r21, r22
    2c9a:	c9 0b       	sbc	r28, r25
    2c9c:	d0 09       	sbc	r29, r0
    2c9e:	c0 f7       	brcc	.-16     	; 0x2c90 <__ftoa_engine+0x10a>
    2ca0:	e1 0c       	add	r14, r1
    2ca2:	f1 1e       	adc	r15, r17
    2ca4:	43 1f       	adc	r20, r19
    2ca6:	56 1f       	adc	r21, r22
    2ca8:	c9 1f       	adc	r28, r25
    2caa:	d0 1d       	adc	r29, r0
    2cac:	7e f4       	brtc	.+30     	; 0x2ccc <__ftoa_engine+0x146>
    2cae:	70 33       	cpi	r23, 0x30	; 48
    2cb0:	11 f4       	brne	.+4      	; 0x2cb6 <__ftoa_engine+0x130>
    2cb2:	8a 95       	dec	r24
    2cb4:	e6 cf       	rjmp	.-52     	; 0x2c82 <__ftoa_engine+0xfc>
    2cb6:	e8 94       	clt
    2cb8:	01 50       	subi	r16, 0x01	; 1
    2cba:	30 f0       	brcs	.+12     	; 0x2cc8 <__ftoa_engine+0x142>
    2cbc:	08 0f       	add	r16, r24
    2cbe:	0a f4       	brpl	.+2      	; 0x2cc2 <__ftoa_engine+0x13c>
    2cc0:	00 27       	eor	r16, r16
    2cc2:	02 17       	cp	r16, r18
    2cc4:	08 f4       	brcc	.+2      	; 0x2cc8 <__ftoa_engine+0x142>
    2cc6:	20 2f       	mov	r18, r16
    2cc8:	23 95       	inc	r18
    2cca:	02 2f       	mov	r16, r18
    2ccc:	7a 33       	cpi	r23, 0x3A	; 58
    2cce:	28 f0       	brcs	.+10     	; 0x2cda <__ftoa_engine+0x154>
    2cd0:	79 e3       	ldi	r23, 0x39	; 57
    2cd2:	7d 93       	st	X+, r23
    2cd4:	2a 95       	dec	r18
    2cd6:	e9 f7       	brne	.-6      	; 0x2cd2 <__ftoa_engine+0x14c>
    2cd8:	10 c0       	rjmp	.+32     	; 0x2cfa <__ftoa_engine+0x174>
    2cda:	7d 93       	st	X+, r23
    2cdc:	2a 95       	dec	r18
    2cde:	89 f6       	brne	.-94     	; 0x2c82 <__ftoa_engine+0xfc>
    2ce0:	06 94       	lsr	r0
    2ce2:	97 95       	ror	r25
    2ce4:	67 95       	ror	r22
    2ce6:	37 95       	ror	r19
    2ce8:	17 95       	ror	r17
    2cea:	17 94       	ror	r1
    2cec:	e1 18       	sub	r14, r1
    2cee:	f1 0a       	sbc	r15, r17
    2cf0:	43 0b       	sbc	r20, r19
    2cf2:	56 0b       	sbc	r21, r22
    2cf4:	c9 0b       	sbc	r28, r25
    2cf6:	d0 09       	sbc	r29, r0
    2cf8:	98 f0       	brcs	.+38     	; 0x2d20 <__ftoa_engine+0x19a>
    2cfa:	23 95       	inc	r18
    2cfc:	7e 91       	ld	r23, -X
    2cfe:	73 95       	inc	r23
    2d00:	7a 33       	cpi	r23, 0x3A	; 58
    2d02:	08 f0       	brcs	.+2      	; 0x2d06 <__ftoa_engine+0x180>
    2d04:	70 e3       	ldi	r23, 0x30	; 48
    2d06:	7c 93       	st	X, r23
    2d08:	20 13       	cpse	r18, r16
    2d0a:	b8 f7       	brcc	.-18     	; 0x2cfa <__ftoa_engine+0x174>
    2d0c:	7e 91       	ld	r23, -X
    2d0e:	70 61       	ori	r23, 0x10	; 16
    2d10:	7d 93       	st	X+, r23
    2d12:	30 f0       	brcs	.+12     	; 0x2d20 <__ftoa_engine+0x19a>
    2d14:	83 95       	inc	r24
    2d16:	71 e3       	ldi	r23, 0x31	; 49
    2d18:	7d 93       	st	X+, r23
    2d1a:	70 e3       	ldi	r23, 0x30	; 48
    2d1c:	2a 95       	dec	r18
    2d1e:	e1 f7       	brne	.-8      	; 0x2d18 <__ftoa_engine+0x192>
    2d20:	11 24       	eor	r1, r1
    2d22:	ef 90       	pop	r14
    2d24:	ff 90       	pop	r15
    2d26:	0f 91       	pop	r16
    2d28:	1f 91       	pop	r17
    2d2a:	cf 91       	pop	r28
    2d2c:	df 91       	pop	r29
    2d2e:	99 27       	eor	r25, r25
    2d30:	87 fd       	sbrc	r24, 7
    2d32:	90 95       	com	r25
    2d34:	08 95       	ret

00002d36 <strrev>:
    2d36:	dc 01       	movw	r26, r24
    2d38:	fc 01       	movw	r30, r24
    2d3a:	67 2f       	mov	r22, r23
    2d3c:	71 91       	ld	r23, Z+
    2d3e:	77 23       	and	r23, r23
    2d40:	e1 f7       	brne	.-8      	; 0x2d3a <strrev+0x4>
    2d42:	32 97       	sbiw	r30, 0x02	; 2
    2d44:	04 c0       	rjmp	.+8      	; 0x2d4e <strrev+0x18>
    2d46:	7c 91       	ld	r23, X
    2d48:	6d 93       	st	X+, r22
    2d4a:	70 83       	st	Z, r23
    2d4c:	62 91       	ld	r22, -Z
    2d4e:	ae 17       	cp	r26, r30
    2d50:	bf 07       	cpc	r27, r31
    2d52:	c8 f3       	brcs	.-14     	; 0x2d46 <strrev+0x10>
    2d54:	08 95       	ret

00002d56 <__udivmodhi4>:
    2d56:	aa 1b       	sub	r26, r26
    2d58:	bb 1b       	sub	r27, r27
    2d5a:	51 e1       	ldi	r21, 0x11	; 17
    2d5c:	07 c0       	rjmp	.+14     	; 0x2d6c <__udivmodhi4_ep>

00002d5e <__udivmodhi4_loop>:
    2d5e:	aa 1f       	adc	r26, r26
    2d60:	bb 1f       	adc	r27, r27
    2d62:	a6 17       	cp	r26, r22
    2d64:	b7 07       	cpc	r27, r23
    2d66:	10 f0       	brcs	.+4      	; 0x2d6c <__udivmodhi4_ep>
    2d68:	a6 1b       	sub	r26, r22
    2d6a:	b7 0b       	sbc	r27, r23

00002d6c <__udivmodhi4_ep>:
    2d6c:	88 1f       	adc	r24, r24
    2d6e:	99 1f       	adc	r25, r25
    2d70:	5a 95       	dec	r21
    2d72:	a9 f7       	brne	.-22     	; 0x2d5e <__udivmodhi4_loop>
    2d74:	80 95       	com	r24
    2d76:	90 95       	com	r25
    2d78:	bc 01       	movw	r22, r24
    2d7a:	cd 01       	movw	r24, r26
    2d7c:	08 95       	ret

00002d7e <_exit>:
    2d7e:	f8 94       	cli

00002d80 <__stop_program>:
    2d80:	ff cf       	rjmp	.-2      	; 0x2d80 <__stop_program>
